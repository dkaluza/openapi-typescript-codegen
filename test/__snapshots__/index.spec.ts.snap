// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`v2 should generate: ./test/generated/v2/core/ApiError.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { ApiRequestOptions } from './ApiRequestOptions';
import type { ApiResult } from './ApiResult';

export class ApiError extends Error {
    public readonly url: string;
    public readonly status: number;
    public readonly statusText: string;
    public readonly body: any;
    public readonly request: ApiRequestOptions;

    constructor(request: ApiRequestOptions, response: ApiResult, message: string) {
        super(message);

        this.name = 'ApiError';
        this.url = response.url;
        this.status = response.status;
        this.statusText = response.statusText;
        this.body = response.body;
        this.request = request;
    }
}
"
`;

exports[`v2 should generate: ./test/generated/v2/core/ApiRequestOptions.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export type ApiRequestOptions = {
    readonly method: 'GET' | 'PUT' | 'POST' | 'DELETE' | 'OPTIONS' | 'HEAD' | 'PATCH';
    readonly url: string;
    readonly path?: Record<string, any>;
    readonly cookies?: Record<string, any>;
    readonly headers?: Record<string, any>;
    readonly query?: Record<string, any>;
    readonly formData?: Record<string, any>;
    readonly body?: any;
    readonly mediaType?: string;
    readonly responseHeader?: string;
    readonly errors?: Record<number, string>;
};
"
`;

exports[`v2 should generate: ./test/generated/v2/core/ApiResult.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export type ApiResult = {
    readonly url: string;
    readonly ok: boolean;
    readonly status: number;
    readonly statusText: string;
    readonly body: any;
};
"
`;

exports[`v2 should generate: ./test/generated/v2/core/CancelablePromise.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export class CancelError extends Error {

    constructor(message: string) {
        super(message);
        this.name = 'CancelError';
    }

    public get isCancelled(): boolean {
        return true;
    }
}

export interface OnCancel {
    readonly isResolved: boolean;
    readonly isRejected: boolean;
    readonly isCancelled: boolean;

    (cancelHandler: () => void): void;
}

export class CancelablePromise<T> implements Promise<T> {
    readonly [Symbol.toStringTag]!: string;

    private _isResolved: boolean;
    private _isRejected: boolean;
    private _isCancelled: boolean;
    private readonly _cancelHandlers: (() => void)[];
    private readonly _promise: Promise<T>;
    private _resolve?: (value: T | PromiseLike<T>) => void;
    private _reject?: (reason?: any) => void;

    constructor(
        executor: (
            resolve: (value: T | PromiseLike<T>) => void,
            reject: (reason?: any) => void,
            onCancel: OnCancel
        ) => void
    ) {
        this._isResolved = false;
        this._isRejected = false;
        this._isCancelled = false;
        this._cancelHandlers = [];
        this._promise = new Promise<T>((resolve, reject) => {
            this._resolve = resolve;
            this._reject = reject;

            const onResolve = (value: T | PromiseLike<T>): void => {
                if (this._isResolved || this._isRejected || this._isCancelled) {
                    return;
                }
                this._isResolved = true;
                this._resolve?.(value);
            };

            const onReject = (reason?: any): void => {
                if (this._isResolved || this._isRejected || this._isCancelled) {
                    return;
                }
                this._isRejected = true;
                this._reject?.(reason);
            };

            const onCancel = (cancelHandler: () => void): void => {
                if (this._isResolved || this._isRejected || this._isCancelled) {
                    return;
                }
                this._cancelHandlers.push(cancelHandler);
            };

            Object.defineProperty(onCancel, 'isResolved', {
                get: (): boolean => this._isResolved,
            });

            Object.defineProperty(onCancel, 'isRejected', {
                get: (): boolean => this._isRejected,
            });

            Object.defineProperty(onCancel, 'isCancelled', {
                get: (): boolean => this._isCancelled,
            });

            return executor(onResolve, onReject, onCancel as OnCancel);
        });
    }

    public then<TResult1 = T, TResult2 = never>(
        onFulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | null,
        onRejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | null
    ): Promise<TResult1 | TResult2> {
        return this._promise.then(onFulfilled, onRejected);
    }

    public catch<TResult = never>(
        onRejected?: ((reason: any) => TResult | PromiseLike<TResult>) | null
    ): Promise<T | TResult> {
        return this._promise.catch(onRejected);
    }

    public finally(onFinally?: (() => void) | null): Promise<T> {
        return this._promise.finally(onFinally);
    }

    public cancel(): void {
        if (this._isResolved || this._isRejected || this._isCancelled) {
            return;
        }
        this._isCancelled = true;
        if (this._cancelHandlers.length) {
            try {
                for (const cancelHandler of this._cancelHandlers) {
                    cancelHandler();
                }
            } catch (error) {
                console.warn('Cancellation threw an error', error);
                return;
            }
        }
        this._cancelHandlers.length = 0;
        this._reject?.(new CancelError('Request aborted'));
    }

    public get isCancelled(): boolean {
        return this._isCancelled;
    }
}
"
`;

exports[`v2 should generate: ./test/generated/v2/core/OpenAPI.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { ApiRequestOptions } from './ApiRequestOptions';

type Resolver<T> = (options: ApiRequestOptions) => Promise<T>;
type Headers = Record<string, string>;

export type OpenAPIConfig = {
    BASE: string;
    VERSION: string;
    WITH_CREDENTIALS: boolean;
    CREDENTIALS: 'include' | 'omit' | 'same-origin';
    TOKEN?: string | Resolver<string>;
    USERNAME?: string | Resolver<string>;
    PASSWORD?: string | Resolver<string>;
    HEADERS?: Headers | Resolver<Headers>;
    ENCODE_PATH?: (path: string) => string;
};

export const OpenAPI: OpenAPIConfig = {
    BASE: 'http://localhost:3000/base',
    VERSION: '1.0',
    WITH_CREDENTIALS: false,
    CREDENTIALS: 'include',
    TOKEN: undefined,
    USERNAME: undefined,
    PASSWORD: undefined,
    HEADERS: undefined,
    ENCODE_PATH: undefined,
};
"
`;

exports[`v2 should generate: ./test/generated/v2/core/request.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import { ApiError } from './ApiError';
import type { ApiRequestOptions } from './ApiRequestOptions';
import type { ApiResult } from './ApiResult';
import { CancelablePromise } from './CancelablePromise';
import type { OnCancel } from './CancelablePromise';
import type { OpenAPIConfig } from './OpenAPI';

const isDefined = <T>(value: T | null | undefined): value is Exclude<T, null | undefined> => {
    return value !== undefined && value !== null;
};

const isString = (value: any): value is string => {
    return typeof value === 'string';
};

const isStringWithValue = (value: any): value is string => {
    return isString(value) && value !== '';
};

const isBlob = (value: any): value is Blob => {
    return (
        typeof value === 'object' &&
        typeof value.type === 'string' &&
        typeof value.stream === 'function' &&
        typeof value.arrayBuffer === 'function' &&
        typeof value.constructor === 'function' &&
        typeof value.constructor.name === 'string' &&
        /^(Blob|File)$/.test(value.constructor.name) &&
        /^(Blob|File)$/.test(value[Symbol.toStringTag])
    );
};

const isFormData = (value: any): value is FormData => {
    return value instanceof FormData;
};

const base64 = (str: string): string => {
    try {
        return btoa(str);
    } catch (err) {
        // @ts-ignore
        return Buffer.from(str).toString('base64');
    }
};

const getQueryString = (params: Record<string, any>): string => {
    const qs: string[] = [];

    const append = (key: string, value: any) => {
        qs.push(\`\${encodeURIComponent(key)}=\${encodeURIComponent(String(value))}\`);
    };

    const process = (key: string, value: any) => {
        if (isDefined(value)) {
            if (Array.isArray(value)) {
                value.forEach(v => {
                    process(key, v);
                });
            } else if (typeof value === 'object') {
                Object.entries(value).forEach(([k, v]) => {
                    process(\`\${key}[\${k}]\`, v);
                });
            } else {
                append(key, value);
            }
        }
    };

    Object.entries(params).forEach(([key, value]) => {
        process(key, value);
    });

    if (qs.length > 0) {
        return \`?\${qs.join('&')}\`;
    }

    return '';
};

const getUrl = (config: OpenAPIConfig, options: ApiRequestOptions): string => {
    const encoder = config.ENCODE_PATH || encodeURI;

    const path = options.url
        .replace('{api-version}', config.VERSION)
        .replace(/{(.*?)}/g, (substring: string, group: string) => {
            if (options.path?.hasOwnProperty(group)) {
                return encoder(String(options.path[group]));
            }
            return substring;
        });

    const url = \`\${config.BASE}\${path}\`;
    if (options.query) {
        return \`\${url}\${getQueryString(options.query)}\`;
    }
    return url;
};

const getFormData = (options: ApiRequestOptions): FormData | undefined => {
    if (options.formData) {
        const formData = new FormData();

        const process = (key: string, value: any) => {
            if (isString(value) || isBlob(value)) {
                formData.append(key, value);
            } else {
                formData.append(key, JSON.stringify(value));
            }
        };

        Object.entries(options.formData)
            .filter(([_, value]) => isDefined(value))
            .forEach(([key, value]) => {
                if (Array.isArray(value)) {
                    value.forEach(v => process(key, v));
                } else {
                    process(key, value);
                }
            });

        return formData;
    }
    return undefined;
};

type Resolver<T> = (options: ApiRequestOptions) => Promise<T>;

const resolve = async <T>(options: ApiRequestOptions, resolver?: T | Resolver<T>): Promise<T | undefined> => {
    if (typeof resolver === 'function') {
        return (resolver as Resolver<T>)(options);
    }
    return resolver;
};

const getHeaders = async (config: OpenAPIConfig, options: ApiRequestOptions): Promise<Headers> => {
    const token = await resolve(options, config.TOKEN);
    const username = await resolve(options, config.USERNAME);
    const password = await resolve(options, config.PASSWORD);
    const additionalHeaders = await resolve(options, config.HEADERS);

    const headers = Object.entries({
        Accept: 'application/json',
        ...additionalHeaders,
        ...options.headers,
    })
        .filter(([_, value]) => isDefined(value))
        .reduce((headers, [key, value]) => ({
            ...headers,
            [key]: String(value),
        }), {} as Record<string, string>);

    if (isStringWithValue(token)) {
        headers['Authorization'] = \`Bearer \${token}\`;
    }

    if (isStringWithValue(username) && isStringWithValue(password)) {
        const credentials = base64(\`\${username}:\${password}\`);
        headers['Authorization'] = \`Basic \${credentials}\`;
    }

    if (options.body) {
        if (options.mediaType) {
            headers['Content-Type'] = options.mediaType;
        } else if (isBlob(options.body)) {
            headers['Content-Type'] = options.body.type || 'application/octet-stream';
        } else if (isString(options.body)) {
            headers['Content-Type'] = 'text/plain';
        } else if (!isFormData(options.body)) {
            headers['Content-Type'] = 'application/json';
        }
    }

    return new Headers(headers);
};

const getRequestBody = (options: ApiRequestOptions): any => {
    if (options.body !== undefined) {
        if (options.mediaType?.includes('/json')) {
            return JSON.stringify(options.body)
        } else if (isString(options.body) || isBlob(options.body) || isFormData(options.body)) {
            return options.body;
        } else {
            return JSON.stringify(options.body);
        }
    }
    return undefined;
};

export const sendRequest = async (
    config: OpenAPIConfig,
    options: ApiRequestOptions,
    url: string,
    body: any,
    formData: FormData | undefined,
    headers: Headers,
    onCancel: OnCancel
): Promise<Response> => {
    const controller = new AbortController();

    const request: RequestInit = {
        headers,
        body: body ?? formData,
        method: options.method,
        signal: controller.signal,
    };

    if (config.WITH_CREDENTIALS) {
        request.credentials = config.CREDENTIALS;
    }

    onCancel(() => controller.abort());

    return await fetch(url, request);
};

const getResponseHeader = (response: Response, responseHeader?: string): string | undefined => {
    if (responseHeader) {
        const content = response.headers.get(responseHeader);
        if (isString(content)) {
            return content;
        }
    }
    return undefined;
};

const getResponseBody = async (response: Response): Promise<any> => {
    if (response.status !== 204) {
        try {
            const contentType = response.headers.get('Content-Type');
            if (contentType) {
                const isJSON = contentType.toLowerCase().startsWith('application/json');
                if (isJSON) {
                    return await response.json();
                } else {
                    return await response.text();
                }
            }
        } catch (error) {
            console.error(error);
        }
    }
    return undefined;
};

const catchErrorCodes = (options: ApiRequestOptions, result: ApiResult): void => {
    const errors: Record<number, string> = {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Internal Server Error',
        502: 'Bad Gateway',
        503: 'Service Unavailable',
        ...options.errors,
    }

    const error = errors[result.status];
    if (error) {
        throw new ApiError(options, result, error);
    }

    if (!result.ok) {
        throw new ApiError(options, result, 'Generic Error');
    }
};

/**
 * Request method
 * @param config The OpenAPI configuration object
 * @param options The request options from the service
 * @returns CancelablePromise<T>
 * @throws ApiError
 */
export const request = <T>(config: OpenAPIConfig, options: ApiRequestOptions): CancelablePromise<T> => {
    return new CancelablePromise(async (resolve, reject, onCancel) => {
        try {
            const url = getUrl(config, options);
            const formData = getFormData(options);
            const body = getRequestBody(options);
            const headers = await getHeaders(config, options);

            if (!onCancel.isCancelled) {
                const response = await sendRequest(config, options, url, body, formData, headers, onCancel);
                const responseBody = await getResponseBody(response);
                const responseHeader = getResponseHeader(response, options.responseHeader);

                const result: ApiResult = {
                    url,
                    ok: response.ok,
                    status: response.status,
                    statusText: response.statusText,
                    body: responseHeader ?? responseBody,
                };

                catchErrorCodes(options, result);

                resolve(result.body);
            }
        } catch (error) {
            reject(error);
        }
    });
};
"
`;

exports[`v2 should generate: ./test/generated/v2/dto/ArrayWithArrayNest.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

import type { ModelWithStringNest } from './ModelWithStringNest';

// ELSE EXPORT TYPE
/**
 * This is a simple array containing an array
 */
export type ArrayWithArrayNest = Array<Array<ModelWithString>>;
"
`;

exports[`v2 should generate: ./test/generated/v2/dto/ArrayWithBooleansNest.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

// ELSE EXPORT TYPE
/**
 * This is a simple array with booleans
 */
export type ArrayWithBooleansNest = Array<boolean>;
"
`;

exports[`v2 should generate: ./test/generated/v2/dto/ArrayWithNumbersNest.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

// ELSE EXPORT TYPE
/**
 * This is a simple array with numbers
 */
export type ArrayWithNumbersNest = Array<number>;
"
`;

exports[`v2 should generate: ./test/generated/v2/dto/ArrayWithPropertiesNest.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

// ELSE EXPORT TYPE
/**
 * This is a simple array with properties
 */
export type ArrayWithPropertiesNest = Array<{
    foo?: string;
    bar?: string;
}>;
"
`;

exports[`v2 should generate: ./test/generated/v2/dto/ArrayWithReferencesNest.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

import type { ModelWithStringNest } from './ModelWithStringNest';

// ELSE EXPORT TYPE
/**
 * This is a simple array with references
 */
export type ArrayWithReferencesNest = Array<ModelWithStringNest>;
"
`;

exports[`v2 should generate: ./test/generated/v2/dto/ArrayWithStringsNest.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

// ELSE EXPORT TYPE
/**
 * This is a simple array with strings
 */
export type ArrayWithStringsNest = Array<string>;
"
`;

exports[`v2 should generate: ./test/generated/v2/dto/CommentWithBackticksNest.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

// ELSE EXPORT TYPE
/**
 * Testing backticks in string: \`backticks\` and \`\`\`multiple backticks\`\`\` should work
 */
export type CommentWithBackticksNest = number;
"
`;

exports[`v2 should generate: ./test/generated/v2/dto/CommentWithBreaksNest.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

// ELSE EXPORT TYPE
/**
 * Testing multiline comments in string: First line
 * Second line
 *
 * Fourth line
 */
export type CommentWithBreaksNest = number;
"
`;

exports[`v2 should generate: ./test/generated/v2/dto/CommentWithExpressionPlaceholdersNest.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

// ELSE EXPORT TYPE
/**
 * Testing expression placeholders in string: \${expression} should work
 */
export type CommentWithExpressionPlaceholdersNest = number;
"
`;

exports[`v2 should generate: ./test/generated/v2/dto/CommentWithQuotesNest.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

// ELSE EXPORT TYPE
/**
 * Testing quotes in string: 'single quote''' and \\"double quotes\\"\\"\\" should work
 */
export type CommentWithQuotesNest = number;
"
`;

exports[`v2 should generate: ./test/generated/v2/dto/CommentWithReservedCharactersNest.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

// ELSE EXPORT TYPE
/**
 * Testing reserved characters in string: * inline * and ** inline ** should work
 */
export type CommentWithReservedCharactersNest = number;
"
`;

exports[`v2 should generate: ./test/generated/v2/dto/CommentWithSlashesNest.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

// ELSE EXPORT TYPE
/**
 * Testing slashes in string: \\\\backwards\\\\\\\\\\\\ and /forwards/// should work
 */
export type CommentWithSlashesNest = number;
"
`;

exports[`v2 should generate: ./test/generated/v2/dto/DateNest.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

// ELSE EXPORT TYPE
/**
 * This is a type-only model that defines Date as a string
 */
export type DateNest = string;
"
`;

exports[`v2 should generate: ./test/generated/v2/dto/DictionaryWithArrayNest.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

import type { ModelWithStringNest } from './ModelWithStringNest';

// ELSE EXPORT TYPE
/**
 * This is a complex dictionary
 */
export type DictionaryWithArrayNest = Record<string, Array<ModelWithString>>;
"
`;

exports[`v2 should generate: ./test/generated/v2/dto/DictionaryWithDictionaryNest.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

// ELSE EXPORT TYPE
/**
 * This is a string dictionary
 */
export type DictionaryWithDictionaryNest = Record<string, Record<string, string>>;
"
`;

exports[`v2 should generate: ./test/generated/v2/dto/DictionaryWithPropertiesNest.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

// ELSE EXPORT TYPE
/**
 * This is a complex dictionary
 */
export type DictionaryWithPropertiesNest = Record<string, {
    foo?: string;
    bar?: string;
}>;
"
`;

exports[`v2 should generate: ./test/generated/v2/dto/DictionaryWithReferenceNest.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

import type { ModelWithStringNest } from './ModelWithStringNest';

// ELSE EXPORT TYPE
/**
 * This is a string reference
 */
export type DictionaryWithReferenceNest = Record<string, ModelWithStringNest>;
"
`;

exports[`v2 should generate: ./test/generated/v2/dto/DictionaryWithStringNest.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

// ELSE EXPORT TYPE
/**
 * This is a string dictionary
 */
export type DictionaryWithStringNest = Record<string, string>;
"
`;

exports[`v2 should generate: ./test/generated/v2/dto/EnumFromDescriptionNest.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

// ELSE EXPORT TYPE
/**
 * Success=1,Warning=2,Error=3
 */
export type EnumFromDescriptionNest = number;
"
`;

exports[`v2 should generate: ./test/generated/v2/dto/EnumWithExtensionsNest.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a simple enum with numbers
 */
export enum EnumWithExtensionsNest {
    /**
     * Used when the status of something is successful
     */
    CUSTOM_SUCCESS = 200,
    /**
     * Used when the status of something has a warning
     */
    CUSTOM_WARNING = 400,
    /**
     * Used when the status of something has an error
     */
    CUSTOM_ERROR = 500,
}

/**
 * Возвращает описание для элемента enum
 * This is a simple enum with numbers
 * @param {EnumWithExtensionsNest} val Значение из EnumWithExtensionsNest
 * @return {string} описание для значения
 */
export const descrEnumWithExtensionsNest = (val: EnumWithExtensionsNest):string => {
    switch (val) {
        case 200:
        return 'Used when the status of something is successful'
        case 400:
        return 'Used when the status of something has a warning'
        case 500:
        return 'Used when the status of something has an error'
        default:
        return ''
    }
}
"
`;

exports[`v2 should generate: ./test/generated/v2/dto/EnumWithNumbersNest.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a simple enum with numbers
 */
export enum EnumWithNumbersNest {
    '_1' = 1,
    '_2' = 2,
    '_3' = 3,
    '_1.1' = 1.1,
    '_1.2' = 1.2,
    '_1.3' = 1.3,
    '_100' = 100,
    '_200' = 200,
    '_300' = 300,
    '_-100' = -100,
    '_-200' = -200,
    '_-300' = -300,
    '_-1.1' = -1.1,
    '_-1.2' = -1.2,
    '_-1.3' = -1.3,
}

/**
 * Возвращает описание для элемента enum
 * This is a simple enum with numbers
 * @param {EnumWithNumbersNest} val Значение из EnumWithNumbersNest
 * @return {string} описание для значения
 */
export const descrEnumWithNumbersNest = (val: EnumWithNumbersNest):string => {
    switch (val) {
        default:
        return ''
    }
}
"
`;

exports[`v2 should generate: ./test/generated/v2/dto/EnumWithStringsNest.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a simple enum with strings
 */
export enum EnumWithStringsNest {
    SUCCESS = 'Success',
    WARNING = 'Warning',
    ERROR = 'Error',
    _SINGLE_QUOTE_ = '\\\\'Single Quote\\\\'',
    _DOUBLE_QUOTES_ = '\\"Double Quotes\\"',
}

/**
 * Возвращает описание для элемента enum
 * This is a simple enum with strings
 * @param {EnumWithStringsNest} val Значение из EnumWithStringsNest
 * @return {string} описание для значения
 */
export const descrEnumWithStringsNest = (val: EnumWithStringsNest):string => {
    switch (val) {
        default:
        return ''
    }
}
"
`;

exports[`v2 should generate: ./test/generated/v2/dto/ModelThatExtendsExtendsNest.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

import type { ModelThatExtendsNest } from './ModelThatExtendsNest';
import type { ModelWithStringNest } from './ModelWithStringNest';

// all-of
/**
 * This is a model that extends another model
 */
export type ModelThatExtendsExtendsNest = (ModelWithStringNest & ModelThatExtendsNest & {
    propExtendsC?: string;
    propExtendsD?: ModelWithStringNest;
});

"
`;

exports[`v2 should generate: ./test/generated/v2/dto/ModelThatExtendsNest.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

import type { ModelWithStringNest } from './ModelWithStringNest';

// all-of
/**
 * This is a model that extends another model
 */
export type ModelThatExtendsNest = (ModelWithStringNest & {
    propExtendsA?: string;
    propExtendsB?: ModelWithStringNest;
});

"
`;

exports[`v2 should generate: ./test/generated/v2/dto/ModelWithArrayNest.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

import type { ModelWithStringNest } from './ModelWithStringNest';

// interface
/**
 * This is a model with one property containing an array
 */
export type ModelWithArrayNest = {
    prop?: Array<ModelWithStringNest>;
    propWithFile?: Array<Blob>;
    propWithNumber?: Array<number>;
};

"
`;

exports[`v2 should generate: ./test/generated/v2/dto/ModelWithBooleanNest.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

// interface
/**
 * This is a model with one boolean property
 */
export type ModelWithBooleanNest = {
    /**
     * This is a simple boolean property
     */
    prop?: boolean;
};

"
`;

exports[`v2 should generate: ./test/generated/v2/dto/ModelWithCircularReferenceNest.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

// interface
/**
 * This is a model with one property containing a circular reference
 */
export type ModelWithCircularReferenceNest = {
    prop?: ModelWithCircularReferenceNest;
};

"
`;

exports[`v2 should generate: ./test/generated/v2/dto/ModelWithDictionaryNest.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

// interface
/**
 * This is a model with one property containing a dictionary
 */
export type ModelWithDictionaryNest = {
    prop?: Record<string, string>;
};

"
`;

exports[`v2 should generate: ./test/generated/v2/dto/ModelWithDuplicateImportsNest.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

import type { ModelWithStringNest } from './ModelWithStringNest';

// interface
/**
 * This is a model with duplicated imports
 */
export type ModelWithDuplicateImportsNest = {
    propA?: ModelWithStringNest;
    propB?: ModelWithStringNest;
    propC?: ModelWithStringNest;
};

"
`;

exports[`v2 should generate: ./test/generated/v2/dto/ModelWithDuplicatePropertiesNest.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

import type { ModelWithStringNest } from './ModelWithStringNest';

// interface
/**
 * This is a model with duplicated properties
 */
export type ModelWithDuplicatePropertiesNest = {
    prop?: ModelWithStringNest;
};

"
`;

exports[`v2 should generate: ./test/generated/v2/dto/ModelWithEnumFromDescriptionNest.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

// interface
/**
 * This is a model with one enum
 */
export type ModelWithEnumFromDescriptionNest = {
    /**
     * Success=1,Warning=2,Error=3
     */
    test?: number;
};

"
`;

exports[`v2 should generate: ./test/generated/v2/dto/ModelWithEnumNest.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

// interface
/**
 * This is a model with one enum
 */
export type ModelWithEnumNest = {
    /**
     * This is a simple enum with strings
     */
    test?: ModelWithEnumNest.test;
    /**
     * These are the HTTP error code enums
     */
    statusCode?: ModelWithEnumNest.statusCode;
    /**
     * Simple boolean enum
     */
    bool?: boolean;
};

export namespace ModelWithEnumNest {

    /**
     * This is a simple enum with strings
     */
    export enum test {
        SUCCESS = 'Success',
        WARNING = 'Warning',
        ERROR = 'Error',
    }

    /**
     * These are the HTTP error code enums
     */
    export enum statusCode {
        _100 = '100',
        _200_FOO = '200 FOO',
        _300_FOO_BAR = '300 FOO_BAR',
        _400_FOO_BAR = '400 foo-bar',
        _500_FOO_BAR = '500 foo.bar',
        _600_FOO_BAR = '600 foo&bar',
    }


}

"
`;

exports[`v2 should generate: ./test/generated/v2/dto/ModelWithIntegerNest.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

// interface
/**
 * This is a model with one number property
 */
export type ModelWithIntegerNest = {
    /**
     * This is a simple number property
     */
    prop?: number;
};

"
`;

exports[`v2 should generate: ./test/generated/v2/dto/ModelWithNestedEnumsNest.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

// interface
/**
 * This is a model with nested enums
 */
export type ModelWithNestedEnumsNest = {
    dictionaryWithEnum?: Record<string, 'Success' | 'Warning' | 'Error'>;
    dictionaryWithEnumFromDescription?: Record<string, number>;
    arrayWithEnum?: Array<'Success' | 'Warning' | 'Error'>;
    arrayWithDescription?: Array<number>;
};

"
`;

exports[`v2 should generate: ./test/generated/v2/dto/ModelWithNestedPropertiesNest.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

// interface
/**
 * This is a model with one nested property
 */
export type ModelWithNestedPropertiesNest = {
    readonly first: {
        readonly second: {
            readonly third: string;
        };
    };
};

"
`;

exports[`v2 should generate: ./test/generated/v2/dto/ModelWithNullableStringNest.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

// interface
/**
 * This is a model with one string property
 */
export type ModelWithNullableStringNest = {
    /**
     * This is a simple string property
     */
    nullableProp?: string | null;
    /**
     * This is a simple string property
     */
    nullableRequiredProp: string | null;
};

"
`;

exports[`v2 should generate: ./test/generated/v2/dto/ModelWithOrderedPropertiesNest.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

// interface
/**
 * This is a model with ordered properties
 */
export type ModelWithOrderedPropertiesNest = {
    zebra?: string;
    apple?: string;
    hawaii?: string;
};

"
`;

exports[`v2 should generate: ./test/generated/v2/dto/ModelWithPatternNest.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

// interface
/**
 * This is a model that contains a some patterns
 */
export type ModelWithPatternNest = {
    key: string;
    name: string;
    readonly enabled?: boolean;
    readonly modified?: string;
    id?: string;
    text?: string;
};

"
`;

exports[`v2 should generate: ./test/generated/v2/dto/ModelWithPropertiesNest.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

import type { ModelWithStringNest } from './ModelWithStringNest';

// interface
/**
 * This is a model with one nested property
 */
export type ModelWithPropertiesNest = {
    required: string;
    readonly requiredAndReadOnly: string;
    string?: string;
    number?: number;
    boolean?: boolean;
    reference?: ModelWithStringNest;
    'property with space'?: string;
    default?: string;
    try?: string;
    readonly '@namespace.string'?: string;
    readonly '@namespace.integer'?: number;
};

"
`;

exports[`v2 should generate: ./test/generated/v2/dto/ModelWithReferenceNest.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

import type { ModelWithPropertiesNest } from './ModelWithPropertiesNest';

// interface
/**
 * This is a model with one property containing a reference
 */
export type ModelWithReferenceNest = {
    prop?: ModelWithPropertiesNest;
};

"
`;

exports[`v2 should generate: ./test/generated/v2/dto/ModelWithStringNest.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

// interface
/**
 * This is a model with one string property
 */
export type ModelWithStringNest = {
    /**
     * This is a simple string property
     */
    prop?: string;
};

"
`;

exports[`v2 should generate: ./test/generated/v2/dto/SimpleBooleanNest.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

// ELSE EXPORT TYPE
/**
 * This is a simple boolean
 */
export type SimpleBooleanNest = boolean;
"
`;

exports[`v2 should generate: ./test/generated/v2/dto/SimpleFileNest.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

// ELSE EXPORT TYPE
/**
 * This is a simple file
 */
export type SimpleFileNest = Blob;
"
`;

exports[`v2 should generate: ./test/generated/v2/dto/SimpleIntegerNest.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

// ELSE EXPORT TYPE
/**
 * This is a simple number
 */
export type SimpleIntegerNest = number;
"
`;

exports[`v2 should generate: ./test/generated/v2/dto/SimpleReferenceNest.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

import type { ModelWithStringNest } from './ModelWithStringNest';

// ELSE EXPORT TYPE
/**
 * This is a simple reference
 */
export type SimpleReferenceNest = ModelWithStringNest;
"
`;

exports[`v2 should generate: ./test/generated/v2/dto/SimpleStringNest.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

// ELSE EXPORT TYPE
/**
 * This is a simple string
 */
export type SimpleStringNest = string;
"
`;

exports[`v2 should generate: ./test/generated/v2/dto/SimpleStringWithPatternNest.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

// ELSE EXPORT TYPE
/**
 * This is a simple string
 */
export type SimpleStringWithPatternNest = string;
"
`;

exports[`v2 should generate: ./test/generated/v2/index.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export { ApiError } from './core/ApiError';
export { CancelablePromise, CancelError } from './core/CancelablePromise';
export { OpenAPI } from './core/OpenAPI';
export type { OpenAPIConfig } from './core/OpenAPI';

export type { ArrayWithArray } from './models/ArrayWithArray';
export type { ArrayWithBooleans } from './models/ArrayWithBooleans';
export type { ArrayWithNumbers } from './models/ArrayWithNumbers';
export type { ArrayWithProperties } from './models/ArrayWithProperties';
export type { ArrayWithReferences } from './models/ArrayWithReferences';
export type { ArrayWithStrings } from './models/ArrayWithStrings';
export type { CommentWithBackticks } from './models/CommentWithBackticks';
export type { CommentWithBreaks } from './models/CommentWithBreaks';
export type { CommentWithExpressionPlaceholders } from './models/CommentWithExpressionPlaceholders';
export type { CommentWithQuotes } from './models/CommentWithQuotes';
export type { CommentWithReservedCharacters } from './models/CommentWithReservedCharacters';
export type { CommentWithSlashes } from './models/CommentWithSlashes';
export type { Date } from './models/Date';
export type { DictionaryWithArray } from './models/DictionaryWithArray';
export type { DictionaryWithDictionary } from './models/DictionaryWithDictionary';
export type { DictionaryWithProperties } from './models/DictionaryWithProperties';
export type { DictionaryWithReference } from './models/DictionaryWithReference';
export type { DictionaryWithString } from './models/DictionaryWithString';
export type { EnumFromDescription } from './models/EnumFromDescription';
export { EnumWithExtensions, descrEnumWithExtensions } from './models/EnumWithExtensions';
export { EnumWithNumbers, descrEnumWithNumbers } from './models/EnumWithNumbers';
export { EnumWithStrings, descrEnumWithStrings } from './models/EnumWithStrings';
export type { ModelThatExtends } from './models/ModelThatExtends';
export type { ModelThatExtendsExtends } from './models/ModelThatExtendsExtends';
export type { ModelWithArray } from './models/ModelWithArray';
export type { ModelWithBoolean } from './models/ModelWithBoolean';
export type { ModelWithCircularReference } from './models/ModelWithCircularReference';
export type { ModelWithDictionary } from './models/ModelWithDictionary';
export type { ModelWithDuplicateImports } from './models/ModelWithDuplicateImports';
export type { ModelWithDuplicateProperties } from './models/ModelWithDuplicateProperties';
export { ModelWithEnum } from './models/ModelWithEnum';
export type { ModelWithEnumFromDescription } from './models/ModelWithEnumFromDescription';
export type { ModelWithInteger } from './models/ModelWithInteger';
export type { ModelWithNestedEnums } from './models/ModelWithNestedEnums';
export type { ModelWithNestedProperties } from './models/ModelWithNestedProperties';
export type { ModelWithNullableString } from './models/ModelWithNullableString';
export type { ModelWithOrderedProperties } from './models/ModelWithOrderedProperties';
export type { ModelWithPattern } from './models/ModelWithPattern';
export type { ModelWithProperties } from './models/ModelWithProperties';
export type { ModelWithReference } from './models/ModelWithReference';
export type { ModelWithString } from './models/ModelWithString';
export type { SimpleBoolean } from './models/SimpleBoolean';
export type { SimpleFile } from './models/SimpleFile';
export type { SimpleInteger } from './models/SimpleInteger';
export type { SimpleReference } from './models/SimpleReference';
export type { SimpleString } from './models/SimpleString';
export type { SimpleStringWithPattern } from './models/SimpleStringWithPattern';

// Nest Dto for Implements
export type { ArrayWithArrayNest } from './dto/ArrayWithArrayNest';
export type { ArrayWithBooleansNest } from './dto/ArrayWithBooleansNest';
export type { ArrayWithNumbersNest } from './dto/ArrayWithNumbersNest';
export type { ArrayWithPropertiesNest } from './dto/ArrayWithPropertiesNest';
export type { ArrayWithReferencesNest } from './dto/ArrayWithReferencesNest';
export type { ArrayWithStringsNest } from './dto/ArrayWithStringsNest';
export type { CommentWithBackticksNest } from './dto/CommentWithBackticksNest';
export type { CommentWithBreaksNest } from './dto/CommentWithBreaksNest';
export type { CommentWithExpressionPlaceholdersNest } from './dto/CommentWithExpressionPlaceholdersNest';
export type { CommentWithQuotesNest } from './dto/CommentWithQuotesNest';
export type { CommentWithReservedCharactersNest } from './dto/CommentWithReservedCharactersNest';
export type { CommentWithSlashesNest } from './dto/CommentWithSlashesNest';
export type { DateNest } from './dto/DateNest';
export type { DictionaryWithArrayNest } from './dto/DictionaryWithArrayNest';
export type { DictionaryWithDictionaryNest } from './dto/DictionaryWithDictionaryNest';
export type { DictionaryWithPropertiesNest } from './dto/DictionaryWithPropertiesNest';
export type { DictionaryWithReferenceNest } from './dto/DictionaryWithReferenceNest';
export type { DictionaryWithStringNest } from './dto/DictionaryWithStringNest';
export type { EnumFromDescriptionNest } from './dto/EnumFromDescriptionNest';
export type { ModelThatExtendsNest } from './dto/ModelThatExtendsNest';
export type { ModelThatExtendsExtendsNest } from './dto/ModelThatExtendsExtendsNest';
export type { ModelWithArrayNest } from './dto/ModelWithArrayNest';
export type { ModelWithBooleanNest } from './dto/ModelWithBooleanNest';
export type { ModelWithCircularReferenceNest } from './dto/ModelWithCircularReferenceNest';
export type { ModelWithDictionaryNest } from './dto/ModelWithDictionaryNest';
export type { ModelWithDuplicateImportsNest } from './dto/ModelWithDuplicateImportsNest';
export type { ModelWithDuplicatePropertiesNest } from './dto/ModelWithDuplicatePropertiesNest';
export { ModelWithEnumNest } from './dto/ModelWithEnumNest';
export type { ModelWithEnumFromDescriptionNest } from './dto/ModelWithEnumFromDescriptionNest';
export type { ModelWithIntegerNest } from './dto/ModelWithIntegerNest';
export type { ModelWithNestedEnumsNest } from './dto/ModelWithNestedEnumsNest';
export type { ModelWithNestedPropertiesNest } from './dto/ModelWithNestedPropertiesNest';
export type { ModelWithNullableStringNest } from './dto/ModelWithNullableStringNest';
export type { ModelWithOrderedPropertiesNest } from './dto/ModelWithOrderedPropertiesNest';
export type { ModelWithPatternNest } from './dto/ModelWithPatternNest';
export type { ModelWithPropertiesNest } from './dto/ModelWithPropertiesNest';
export type { ModelWithReferenceNest } from './dto/ModelWithReferenceNest';
export type { ModelWithStringNest } from './dto/ModelWithStringNest';
export type { SimpleBooleanNest } from './dto/SimpleBooleanNest';
export type { SimpleFileNest } from './dto/SimpleFileNest';
export type { SimpleIntegerNest } from './dto/SimpleIntegerNest';
export type { SimpleReferenceNest } from './dto/SimpleReferenceNest';
export type { SimpleStringNest } from './dto/SimpleStringNest';
export type { SimpleStringWithPatternNest } from './dto/SimpleStringWithPatternNest';


export { $ArrayWithArray } from './schemas/$ArrayWithArray';
export { $ArrayWithBooleans } from './schemas/$ArrayWithBooleans';
export { $ArrayWithNumbers } from './schemas/$ArrayWithNumbers';
export { $ArrayWithProperties } from './schemas/$ArrayWithProperties';
export { $ArrayWithReferences } from './schemas/$ArrayWithReferences';
export { $ArrayWithStrings } from './schemas/$ArrayWithStrings';
export { $CommentWithBackticks } from './schemas/$CommentWithBackticks';
export { $CommentWithBreaks } from './schemas/$CommentWithBreaks';
export { $CommentWithExpressionPlaceholders } from './schemas/$CommentWithExpressionPlaceholders';
export { $CommentWithQuotes } from './schemas/$CommentWithQuotes';
export { $CommentWithReservedCharacters } from './schemas/$CommentWithReservedCharacters';
export { $CommentWithSlashes } from './schemas/$CommentWithSlashes';
export { $Date } from './schemas/$Date';
export { $DictionaryWithArray } from './schemas/$DictionaryWithArray';
export { $DictionaryWithDictionary } from './schemas/$DictionaryWithDictionary';
export { $DictionaryWithProperties } from './schemas/$DictionaryWithProperties';
export { $DictionaryWithReference } from './schemas/$DictionaryWithReference';
export { $DictionaryWithString } from './schemas/$DictionaryWithString';
export { $EnumFromDescription } from './schemas/$EnumFromDescription';
export { $EnumWithExtensions } from './schemas/$EnumWithExtensions';
export { $EnumWithNumbers } from './schemas/$EnumWithNumbers';
export { $EnumWithStrings } from './schemas/$EnumWithStrings';
export { $ModelThatExtends } from './schemas/$ModelThatExtends';
export { $ModelThatExtendsExtends } from './schemas/$ModelThatExtendsExtends';
export { $ModelWithArray } from './schemas/$ModelWithArray';
export { $ModelWithBoolean } from './schemas/$ModelWithBoolean';
export { $ModelWithCircularReference } from './schemas/$ModelWithCircularReference';
export { $ModelWithDictionary } from './schemas/$ModelWithDictionary';
export { $ModelWithDuplicateImports } from './schemas/$ModelWithDuplicateImports';
export { $ModelWithDuplicateProperties } from './schemas/$ModelWithDuplicateProperties';
export { $ModelWithEnum } from './schemas/$ModelWithEnum';
export { $ModelWithEnumFromDescription } from './schemas/$ModelWithEnumFromDescription';
export { $ModelWithInteger } from './schemas/$ModelWithInteger';
export { $ModelWithNestedEnums } from './schemas/$ModelWithNestedEnums';
export { $ModelWithNestedProperties } from './schemas/$ModelWithNestedProperties';
export { $ModelWithNullableString } from './schemas/$ModelWithNullableString';
export { $ModelWithOrderedProperties } from './schemas/$ModelWithOrderedProperties';
export { $ModelWithPattern } from './schemas/$ModelWithPattern';
export { $ModelWithProperties } from './schemas/$ModelWithProperties';
export { $ModelWithReference } from './schemas/$ModelWithReference';
export { $ModelWithString } from './schemas/$ModelWithString';
export { $SimpleBoolean } from './schemas/$SimpleBoolean';
export { $SimpleFile } from './schemas/$SimpleFile';
export { $SimpleInteger } from './schemas/$SimpleInteger';
export { $SimpleReference } from './schemas/$SimpleReference';
export { $SimpleString } from './schemas/$SimpleString';
export { $SimpleStringWithPattern } from './schemas/$SimpleStringWithPattern';

export { CollectionFormatService } from './services/CollectionFormatService';
export { ComplexService } from './services/ComplexService';
export { DefaultService } from './services/DefaultService';
export { DefaultsService } from './services/DefaultsService';
export { DescriptionsService } from './services/DescriptionsService';
export { DuplicateService } from './services/DuplicateService';
export { ErrorService } from './services/ErrorService';
export { HeaderService } from './services/HeaderService';
export { MultipleTags1Service } from './services/MultipleTags1Service';
export { MultipleTags2Service } from './services/MultipleTags2Service';
export { MultipleTags3Service } from './services/MultipleTags3Service';
export { NoContentService } from './services/NoContentService';
export { ParametersService } from './services/ParametersService';
export { ResponseService } from './services/ResponseService';
export { SimpleService } from './services/SimpleService';
export { TypesService } from './services/TypesService';
"
`;

exports[`v2 should generate: ./test/generated/v2/models/ArrayWithArray.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

import type { ModelWithString } from './ModelWithString';

/**
 * This is a simple array containing an array
 */
export type ArrayWithArray = Array<Array<ModelWithString>>;
"
`;

exports[`v2 should generate: ./test/generated/v2/models/ArrayWithBooleans.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a simple array with booleans
 */
export type ArrayWithBooleans = Array<boolean>;
"
`;

exports[`v2 should generate: ./test/generated/v2/models/ArrayWithNumbers.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a simple array with numbers
 */
export type ArrayWithNumbers = Array<number>;
"
`;

exports[`v2 should generate: ./test/generated/v2/models/ArrayWithProperties.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a simple array with properties
 */
export type ArrayWithProperties = Array<{
    foo?: string;
    bar?: string;
}>;
"
`;

exports[`v2 should generate: ./test/generated/v2/models/ArrayWithReferences.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

import type { ModelWithString } from './ModelWithString';

/**
 * This is a simple array with references
 */
export type ArrayWithReferences = Array<ModelWithString>;
"
`;

exports[`v2 should generate: ./test/generated/v2/models/ArrayWithStrings.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a simple array with strings
 */
export type ArrayWithStrings = Array<string>;
"
`;

exports[`v2 should generate: ./test/generated/v2/models/CommentWithBackticks.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * Testing backticks in string: \`backticks\` and \`\`\`multiple backticks\`\`\` should work
 */
export type CommentWithBackticks = number;
"
`;

exports[`v2 should generate: ./test/generated/v2/models/CommentWithBreaks.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * Testing multiline comments in string: First line
 * Second line
 *
 * Fourth line
 */
export type CommentWithBreaks = number;
"
`;

exports[`v2 should generate: ./test/generated/v2/models/CommentWithExpressionPlaceholders.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * Testing expression placeholders in string: \${expression} should work
 */
export type CommentWithExpressionPlaceholders = number;
"
`;

exports[`v2 should generate: ./test/generated/v2/models/CommentWithQuotes.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * Testing quotes in string: 'single quote''' and \\"double quotes\\"\\"\\" should work
 */
export type CommentWithQuotes = number;
"
`;

exports[`v2 should generate: ./test/generated/v2/models/CommentWithReservedCharacters.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * Testing reserved characters in string: * inline * and ** inline ** should work
 */
export type CommentWithReservedCharacters = number;
"
`;

exports[`v2 should generate: ./test/generated/v2/models/CommentWithSlashes.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * Testing slashes in string: \\\\backwards\\\\\\\\\\\\ and /forwards/// should work
 */
export type CommentWithSlashes = number;
"
`;

exports[`v2 should generate: ./test/generated/v2/models/Date.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a type-only model that defines Date as a string
 */
export type Date = string;
"
`;

exports[`v2 should generate: ./test/generated/v2/models/DictionaryWithArray.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

import type { ModelWithString } from './ModelWithString';

/**
 * This is a complex dictionary
 */
export type DictionaryWithArray = Record<string, Array<ModelWithString>>;
"
`;

exports[`v2 should generate: ./test/generated/v2/models/DictionaryWithDictionary.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a string dictionary
 */
export type DictionaryWithDictionary = Record<string, Record<string, string>>;
"
`;

exports[`v2 should generate: ./test/generated/v2/models/DictionaryWithProperties.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a complex dictionary
 */
export type DictionaryWithProperties = Record<string, {
    foo?: string;
    bar?: string;
}>;
"
`;

exports[`v2 should generate: ./test/generated/v2/models/DictionaryWithReference.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

import type { ModelWithString } from './ModelWithString';

/**
 * This is a string reference
 */
export type DictionaryWithReference = Record<string, ModelWithString>;
"
`;

exports[`v2 should generate: ./test/generated/v2/models/DictionaryWithString.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a string dictionary
 */
export type DictionaryWithString = Record<string, string>;
"
`;

exports[`v2 should generate: ./test/generated/v2/models/EnumFromDescription.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * Success=1,Warning=2,Error=3
 */
export type EnumFromDescription = number;
"
`;

exports[`v2 should generate: ./test/generated/v2/models/EnumWithExtensions.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a simple enum with numbers
 */
export enum EnumWithExtensions {
    /**
     * Used when the status of something is successful
     */
    CUSTOM_SUCCESS = 200,
    /**
     * Used when the status of something has a warning
     */
    CUSTOM_WARNING = 400,
    /**
     * Used when the status of something has an error
     */
    CUSTOM_ERROR = 500,
}

/**
 * Возвращает описание для элемента enum
 * This is a simple enum with numbers
 * @param {EnumWithExtensions} val Значение из EnumWithExtensions
 * @return {string} описание для значения
 */
export const descrEnumWithExtensions = (val: EnumWithExtensions):string => {
    switch (val) {
        case 200:
        return 'Used when the status of something is successful'
        case 400:
        return 'Used when the status of something has a warning'
        case 500:
        return 'Used when the status of something has an error'
        default:
        return ''
    }
}
"
`;

exports[`v2 should generate: ./test/generated/v2/models/EnumWithNumbers.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a simple enum with numbers
 */
export enum EnumWithNumbers {
    '_1' = 1,
    '_2' = 2,
    '_3' = 3,
    '_1.1' = 1.1,
    '_1.2' = 1.2,
    '_1.3' = 1.3,
    '_100' = 100,
    '_200' = 200,
    '_300' = 300,
    '_-100' = -100,
    '_-200' = -200,
    '_-300' = -300,
    '_-1.1' = -1.1,
    '_-1.2' = -1.2,
    '_-1.3' = -1.3,
}

/**
 * Возвращает описание для элемента enum
 * This is a simple enum with numbers
 * @param {EnumWithNumbers} val Значение из EnumWithNumbers
 * @return {string} описание для значения
 */
export const descrEnumWithNumbers = (val: EnumWithNumbers):string => {
    switch (val) {
        default:
        return ''
    }
}
"
`;

exports[`v2 should generate: ./test/generated/v2/models/EnumWithStrings.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a simple enum with strings
 */
export enum EnumWithStrings {
    SUCCESS = 'Success',
    WARNING = 'Warning',
    ERROR = 'Error',
    _SINGLE_QUOTE_ = '\\\\'Single Quote\\\\'',
    _DOUBLE_QUOTES_ = '\\"Double Quotes\\"',
}

/**
 * Возвращает описание для элемента enum
 * This is a simple enum with strings
 * @param {EnumWithStrings} val Значение из EnumWithStrings
 * @return {string} описание для значения
 */
export const descrEnumWithStrings = (val: EnumWithStrings):string => {
    switch (val) {
        default:
        return ''
    }
}
"
`;

exports[`v2 should generate: ./test/generated/v2/models/ModelThatExtends.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

import type { ModelWithString } from './ModelWithString';

/**
 * This is a model that extends another model
 */
export type ModelThatExtends = (ModelWithString & {
    propExtendsA?: string;
    propExtendsB?: ModelWithString;
});

"
`;

exports[`v2 should generate: ./test/generated/v2/models/ModelThatExtendsExtends.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

import type { ModelThatExtends } from './ModelThatExtends';
import type { ModelWithString } from './ModelWithString';

/**
 * This is a model that extends another model
 */
export type ModelThatExtendsExtends = (ModelWithString & ModelThatExtends & {
    propExtendsC?: string;
    propExtendsD?: ModelWithString;
});

"
`;

exports[`v2 should generate: ./test/generated/v2/models/ModelWithArray.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

import type { ModelWithString } from './ModelWithString';

/**
 * This is a model with one property containing an array
 */
export type ModelWithArray = {
    prop?: Array<ModelWithString>;
    propWithFile?: Array<Blob>;
    propWithNumber?: Array<number>;
};

"
`;

exports[`v2 should generate: ./test/generated/v2/models/ModelWithBoolean.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a model with one boolean property
 */
export type ModelWithBoolean = {
    /**
     * This is a simple boolean property
     */
    prop?: boolean;
};

"
`;

exports[`v2 should generate: ./test/generated/v2/models/ModelWithCircularReference.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a model with one property containing a circular reference
 */
export type ModelWithCircularReference = {
    prop?: ModelWithCircularReference;
};

"
`;

exports[`v2 should generate: ./test/generated/v2/models/ModelWithDictionary.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a model with one property containing a dictionary
 */
export type ModelWithDictionary = {
    prop?: Record<string, string>;
};

"
`;

exports[`v2 should generate: ./test/generated/v2/models/ModelWithDuplicateImports.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

import type { ModelWithString } from './ModelWithString';

/**
 * This is a model with duplicated imports
 */
export type ModelWithDuplicateImports = {
    propA?: ModelWithString;
    propB?: ModelWithString;
    propC?: ModelWithString;
};

"
`;

exports[`v2 should generate: ./test/generated/v2/models/ModelWithDuplicateProperties.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

import type { ModelWithString } from './ModelWithString';

/**
 * This is a model with duplicated properties
 */
export type ModelWithDuplicateProperties = {
    prop?: ModelWithString;
};

"
`;

exports[`v2 should generate: ./test/generated/v2/models/ModelWithEnum.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a model with one enum
 */
export type ModelWithEnum = {
    /**
     * This is a simple enum with strings
     */
    test?: ModelWithEnum.test;
    /**
     * These are the HTTP error code enums
     */
    statusCode?: ModelWithEnum.statusCode;
    /**
     * Simple boolean enum
     */
    bool?: boolean;
};

export namespace ModelWithEnum {

    /**
     * This is a simple enum with strings
     */
    export enum test {
        SUCCESS = 'Success',
        WARNING = 'Warning',
        ERROR = 'Error',
    }

    /**
     * These are the HTTP error code enums
     */
    export enum statusCode {
        _100 = '100',
        _200_FOO = '200 FOO',
        _300_FOO_BAR = '300 FOO_BAR',
        _400_FOO_BAR = '400 foo-bar',
        _500_FOO_BAR = '500 foo.bar',
        _600_FOO_BAR = '600 foo&bar',
    }


}

"
`;

exports[`v2 should generate: ./test/generated/v2/models/ModelWithEnumFromDescription.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a model with one enum
 */
export type ModelWithEnumFromDescription = {
    /**
     * Success=1,Warning=2,Error=3
     */
    test?: number;
};

"
`;

exports[`v2 should generate: ./test/generated/v2/models/ModelWithInteger.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a model with one number property
 */
export type ModelWithInteger = {
    /**
     * This is a simple number property
     */
    prop?: number;
};

"
`;

exports[`v2 should generate: ./test/generated/v2/models/ModelWithNestedEnums.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a model with nested enums
 */
export type ModelWithNestedEnums = {
    dictionaryWithEnum?: Record<string, 'Success' | 'Warning' | 'Error'>;
    dictionaryWithEnumFromDescription?: Record<string, number>;
    arrayWithEnum?: Array<'Success' | 'Warning' | 'Error'>;
    arrayWithDescription?: Array<number>;
};

"
`;

exports[`v2 should generate: ./test/generated/v2/models/ModelWithNestedProperties.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a model with one nested property
 */
export type ModelWithNestedProperties = {
    readonly first: {
        readonly second: {
            readonly third: string;
        };
    };
};

"
`;

exports[`v2 should generate: ./test/generated/v2/models/ModelWithNullableString.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a model with one string property
 */
export type ModelWithNullableString = {
    /**
     * This is a simple string property
     */
    nullableProp?: string | null;
    /**
     * This is a simple string property
     */
    nullableRequiredProp: string | null;
};

"
`;

exports[`v2 should generate: ./test/generated/v2/models/ModelWithOrderedProperties.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a model with ordered properties
 */
export type ModelWithOrderedProperties = {
    zebra?: string;
    apple?: string;
    hawaii?: string;
};

"
`;

exports[`v2 should generate: ./test/generated/v2/models/ModelWithPattern.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a model that contains a some patterns
 */
export type ModelWithPattern = {
    key: string;
    name: string;
    readonly enabled?: boolean;
    readonly modified?: string;
    id?: string;
    text?: string;
};

"
`;

exports[`v2 should generate: ./test/generated/v2/models/ModelWithProperties.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

import type { ModelWithString } from './ModelWithString';

/**
 * This is a model with one nested property
 */
export type ModelWithProperties = {
    required: string;
    readonly requiredAndReadOnly: string;
    string?: string;
    number?: number;
    boolean?: boolean;
    reference?: ModelWithString;
    'property with space'?: string;
    default?: string;
    try?: string;
    readonly '@namespace.string'?: string;
    readonly '@namespace.integer'?: number;
};

"
`;

exports[`v2 should generate: ./test/generated/v2/models/ModelWithReference.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

import type { ModelWithProperties } from './ModelWithProperties';

/**
 * This is a model with one property containing a reference
 */
export type ModelWithReference = {
    prop?: ModelWithProperties;
};

"
`;

exports[`v2 should generate: ./test/generated/v2/models/ModelWithString.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a model with one string property
 */
export type ModelWithString = {
    /**
     * This is a simple string property
     */
    prop?: string;
};

"
`;

exports[`v2 should generate: ./test/generated/v2/models/SimpleBoolean.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a simple boolean
 */
export type SimpleBoolean = boolean;
"
`;

exports[`v2 should generate: ./test/generated/v2/models/SimpleFile.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a simple file
 */
export type SimpleFile = Blob;
"
`;

exports[`v2 should generate: ./test/generated/v2/models/SimpleInteger.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a simple number
 */
export type SimpleInteger = number;
"
`;

exports[`v2 should generate: ./test/generated/v2/models/SimpleReference.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

import type { ModelWithString } from './ModelWithString';

/**
 * This is a simple reference
 */
export type SimpleReference = ModelWithString;
"
`;

exports[`v2 should generate: ./test/generated/v2/models/SimpleString.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a simple string
 */
export type SimpleString = string;
"
`;

exports[`v2 should generate: ./test/generated/v2/models/SimpleStringWithPattern.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a simple string
 */
export type SimpleStringWithPattern = string;
"
`;

exports[`v2 should generate: ./test/generated/v2/schemas/$ArrayWithArray.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ArrayWithArray = {
    type: 'array',
    contains: {
        type: 'array',
        contains: {
            type: 'ModelWithString',
        },
    },
} as const;
"
`;

exports[`v2 should generate: ./test/generated/v2/schemas/$ArrayWithBooleans.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ArrayWithBooleans = {
    type: 'array',
    contains: {
        type: 'boolean',
    },
} as const;
"
`;

exports[`v2 should generate: ./test/generated/v2/schemas/$ArrayWithNumbers.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ArrayWithNumbers = {
    type: 'array',
    contains: {
        type: 'number',
    },
} as const;
"
`;

exports[`v2 should generate: ./test/generated/v2/schemas/$ArrayWithProperties.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ArrayWithProperties = {
    type: 'array',
    contains: {
        properties: {
            foo: {
                type: 'string',
            },
            bar: {
                type: 'string',
            },
        },
    },
} as const;
"
`;

exports[`v2 should generate: ./test/generated/v2/schemas/$ArrayWithReferences.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ArrayWithReferences = {
    type: 'array',
    contains: {
        type: 'ModelWithString',
    },
} as const;
"
`;

exports[`v2 should generate: ./test/generated/v2/schemas/$ArrayWithStrings.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ArrayWithStrings = {
    type: 'array',
    contains: {
        type: 'string',
    },
} as const;
"
`;

exports[`v2 should generate: ./test/generated/v2/schemas/$CommentWithBackticks.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $CommentWithBackticks = {
    type: 'number',
    description: \`Testing backticks in string: \\\\\`backticks\\\\\` and \\\\\`\\\\\`\\\\\`multiple backticks\\\\\`\\\\\`\\\\\` should work\`,
} as const;
"
`;

exports[`v2 should generate: ./test/generated/v2/schemas/$CommentWithBreaks.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $CommentWithBreaks = {
    type: 'number',
    description: \`Testing multiline comments in string: First line
    Second line

    Fourth line\`,
} as const;
"
`;

exports[`v2 should generate: ./test/generated/v2/schemas/$CommentWithExpressionPlaceholders.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $CommentWithExpressionPlaceholders = {
    type: 'number',
    description: \`Testing expression placeholders in string: \\\\\${expression} should work\`,
} as const;
"
`;

exports[`v2 should generate: ./test/generated/v2/schemas/$CommentWithQuotes.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $CommentWithQuotes = {
    type: 'number',
    description: \`Testing quotes in string: 'single quote''' and \\"double quotes\\"\\"\\" should work\`,
} as const;
"
`;

exports[`v2 should generate: ./test/generated/v2/schemas/$CommentWithReservedCharacters.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $CommentWithReservedCharacters = {
    type: 'number',
    description: \`Testing reserved characters in string: /* inline */ and /** inline **/ should work\`,
} as const;
"
`;

exports[`v2 should generate: ./test/generated/v2/schemas/$CommentWithSlashes.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $CommentWithSlashes = {
    type: 'number',
    description: \`Testing slashes in string: \\\\\\\\backwards\\\\\\\\\\\\\\\\\\\\\\\\ and /forwards/// should work\`,
} as const;
"
`;

exports[`v2 should generate: ./test/generated/v2/schemas/$Date.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $Date = {
    type: 'string',
    description: \`This is a type-only model that defines Date as a string\`,
} as const;
"
`;

exports[`v2 should generate: ./test/generated/v2/schemas/$DictionaryWithArray.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $DictionaryWithArray = {
    type: 'dictionary',
    contains: {
        type: 'array',
        contains: {
            type: 'ModelWithString',
        },
    },
} as const;
"
`;

exports[`v2 should generate: ./test/generated/v2/schemas/$DictionaryWithDictionary.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $DictionaryWithDictionary = {
    type: 'dictionary',
    contains: {
        type: 'dictionary',
        contains: {
            type: 'string',
        },
    },
} as const;
"
`;

exports[`v2 should generate: ./test/generated/v2/schemas/$DictionaryWithProperties.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $DictionaryWithProperties = {
    type: 'dictionary',
    contains: {
        properties: {
            foo: {
                type: 'string',
            },
            bar: {
                type: 'string',
            },
        },
    },
} as const;
"
`;

exports[`v2 should generate: ./test/generated/v2/schemas/$DictionaryWithReference.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $DictionaryWithReference = {
    type: 'dictionary',
    contains: {
        type: 'ModelWithString',
    },
} as const;
"
`;

exports[`v2 should generate: ./test/generated/v2/schemas/$DictionaryWithString.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $DictionaryWithString = {
    type: 'dictionary',
    contains: {
        type: 'string',
    },
} as const;
"
`;

exports[`v2 should generate: ./test/generated/v2/schemas/$EnumFromDescription.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $EnumFromDescription = {
    type: 'number',
    description: \`Success=1,Warning=2,Error=3\`,
} as const;
"
`;

exports[`v2 should generate: ./test/generated/v2/schemas/$EnumWithExtensions.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $EnumWithExtensions = {
    type: 'Enum',
} as const;
"
`;

exports[`v2 should generate: ./test/generated/v2/schemas/$EnumWithNumbers.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $EnumWithNumbers = {
    type: 'Enum',
} as const;
"
`;

exports[`v2 should generate: ./test/generated/v2/schemas/$EnumWithStrings.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $EnumWithStrings = {
    type: 'Enum',
} as const;
"
`;

exports[`v2 should generate: ./test/generated/v2/schemas/$ModelThatExtends.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelThatExtends = {
    type: 'all-of',
    description: \`This is a model that extends another model\`,
    contains: [{
        type: 'ModelWithString',
    }, {
        properties: {
            propExtendsA: {
                type: 'string',
            },
            propExtendsB: {
                type: 'ModelWithString',
            },
        },
    }],
} as const;
"
`;

exports[`v2 should generate: ./test/generated/v2/schemas/$ModelThatExtendsExtends.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelThatExtendsExtends = {
    type: 'all-of',
    description: \`This is a model that extends another model\`,
    contains: [{
        type: 'ModelWithString',
    }, {
        type: 'ModelThatExtends',
    }, {
        properties: {
            propExtendsC: {
                type: 'string',
            },
            propExtendsD: {
                type: 'ModelWithString',
            },
        },
    }],
} as const;
"
`;

exports[`v2 should generate: ./test/generated/v2/schemas/$ModelWithArray.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelWithArray = {
    description: \`This is a model with one property containing an array\`,
    properties: {
        prop: {
            type: 'array',
            contains: {
                type: 'ModelWithString',
            },
        },
        propWithFile: {
            type: 'array',
            contains: {
                type: 'binary',
            },
        },
        propWithNumber: {
            type: 'array',
            contains: {
                type: 'number',
            },
        },
    },
} as const;
"
`;

exports[`v2 should generate: ./test/generated/v2/schemas/$ModelWithBoolean.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelWithBoolean = {
    description: \`This is a model with one boolean property\`,
    properties: {
        prop: {
            type: 'boolean',
            description: \`This is a simple boolean property\`,
        },
    },
} as const;
"
`;

exports[`v2 should generate: ./test/generated/v2/schemas/$ModelWithCircularReference.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelWithCircularReference = {
    description: \`This is a model with one property containing a circular reference\`,
    properties: {
        prop: {
            type: 'ModelWithCircularReference',
        },
    },
} as const;
"
`;

exports[`v2 should generate: ./test/generated/v2/schemas/$ModelWithDictionary.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelWithDictionary = {
    description: \`This is a model with one property containing a dictionary\`,
    properties: {
        prop: {
            type: 'dictionary',
            contains: {
                type: 'string',
            },
        },
    },
} as const;
"
`;

exports[`v2 should generate: ./test/generated/v2/schemas/$ModelWithDuplicateImports.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelWithDuplicateImports = {
    description: \`This is a model with duplicated imports\`,
    properties: {
        propA: {
            type: 'ModelWithString',
        },
        propB: {
            type: 'ModelWithString',
        },
        propC: {
            type: 'ModelWithString',
        },
    },
} as const;
"
`;

exports[`v2 should generate: ./test/generated/v2/schemas/$ModelWithDuplicateProperties.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelWithDuplicateProperties = {
    description: \`This is a model with duplicated properties\`,
    properties: {
        prop: {
            type: 'ModelWithString',
        },
    },
} as const;
"
`;

exports[`v2 should generate: ./test/generated/v2/schemas/$ModelWithEnum.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelWithEnum = {
    description: \`This is a model with one enum\`,
    properties: {
        test: {
            type: 'Enum',
        },
        statusCode: {
            type: 'Enum',
        },
        bool: {
            type: 'boolean',
            description: \`Simple boolean enum\`,
        },
    },
} as const;
"
`;

exports[`v2 should generate: ./test/generated/v2/schemas/$ModelWithEnumFromDescription.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelWithEnumFromDescription = {
    description: \`This is a model with one enum\`,
    properties: {
        test: {
            type: 'number',
            description: \`Success=1,Warning=2,Error=3\`,
        },
    },
} as const;
"
`;

exports[`v2 should generate: ./test/generated/v2/schemas/$ModelWithInteger.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelWithInteger = {
    description: \`This is a model with one number property\`,
    properties: {
        prop: {
            type: 'number',
            description: \`This is a simple number property\`,
        },
    },
} as const;
"
`;

exports[`v2 should generate: ./test/generated/v2/schemas/$ModelWithNestedEnums.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelWithNestedEnums = {
    description: \`This is a model with nested enums\`,
    properties: {
        dictionaryWithEnum: {
            type: 'dictionary',
            contains: {
                type: 'Enum',
            },
        },
        dictionaryWithEnumFromDescription: {
            type: 'dictionary',
            contains: {
                type: 'number',
                description: \`Success=1,Warning=2,Error=3\`,
            },
        },
        arrayWithEnum: {
            type: 'array',
            contains: {
                type: 'Enum',
            },
        },
        arrayWithDescription: {
            type: 'array',
            contains: {
                type: 'number',
                description: \`Success=1,Warning=2,Error=3\`,
            },
        },
    },
} as const;
"
`;

exports[`v2 should generate: ./test/generated/v2/schemas/$ModelWithNestedProperties.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelWithNestedProperties = {
    description: \`This is a model with one nested property\`,
    properties: {
        first: {
            properties: {
                second: {
                    properties: {
                        third: {
                            type: 'string',
                            isReadOnly: true,
                            isRequired: true,
                        },
                    },
                    isReadOnly: true,
                    isRequired: true,
                },
            },
            isReadOnly: true,
            isRequired: true,
        },
    },
} as const;
"
`;

exports[`v2 should generate: ./test/generated/v2/schemas/$ModelWithNullableString.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelWithNullableString = {
    description: \`This is a model with one string property\`,
    properties: {
        nullableProp: {
            type: 'string',
            description: \`This is a simple string property\`,
            isNullable: true,
        },
        nullableRequiredProp: {
            type: 'string',
            description: \`This is a simple string property\`,
            isRequired: true,
            isNullable: true,
        },
    },
} as const;
"
`;

exports[`v2 should generate: ./test/generated/v2/schemas/$ModelWithOrderedProperties.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelWithOrderedProperties = {
    description: \`This is a model with ordered properties\`,
    properties: {
        zebra: {
            type: 'string',
        },
        apple: {
            type: 'string',
        },
        hawaii: {
            type: 'string',
        },
    },
} as const;
"
`;

exports[`v2 should generate: ./test/generated/v2/schemas/$ModelWithPattern.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelWithPattern = {
    description: \`This is a model that contains a some patterns\`,
    properties: {
        key: {
            type: 'string',
            isRequired: true,
            maxLength: 64,
            pattern: '^[a-zA-Z0-9_]*$',
        },
        name: {
            type: 'string',
            isRequired: true,
            maxLength: 255,
        },
        enabled: {
            type: 'boolean',
            isReadOnly: true,
        },
        modified: {
            type: 'string',
            isReadOnly: true,
            format: 'date-time',
        },
        id: {
            type: 'string',
            pattern: '^\\\\\\\\d{2}-\\\\\\\\d{3}-\\\\\\\\d{4}$',
        },
        text: {
            type: 'string',
            pattern: '^\\\\\\\\w+$',
        },
    },
} as const;
"
`;

exports[`v2 should generate: ./test/generated/v2/schemas/$ModelWithProperties.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelWithProperties = {
    description: \`This is a model with one nested property\`,
    properties: {
        required: {
            type: 'string',
            isRequired: true,
        },
        requiredAndReadOnly: {
            type: 'string',
            isReadOnly: true,
            isRequired: true,
        },
        string: {
            type: 'string',
        },
        number: {
            type: 'number',
        },
        boolean: {
            type: 'boolean',
        },
        reference: {
            type: 'ModelWithString',
        },
        'property with space': {
            type: 'string',
        },
        default: {
            type: 'string',
        },
        try: {
            type: 'string',
        },
        '@namespace.string': {
            type: 'string',
            isReadOnly: true,
        },
        '@namespace.integer': {
            type: 'number',
            isReadOnly: true,
        },
    },
} as const;
"
`;

exports[`v2 should generate: ./test/generated/v2/schemas/$ModelWithReference.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelWithReference = {
    description: \`This is a model with one property containing a reference\`,
    properties: {
        prop: {
            type: 'ModelWithProperties',
        },
    },
} as const;
"
`;

exports[`v2 should generate: ./test/generated/v2/schemas/$ModelWithString.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelWithString = {
    description: \`This is a model with one string property\`,
    properties: {
        prop: {
            type: 'string',
            description: \`This is a simple string property\`,
        },
    },
} as const;
"
`;

exports[`v2 should generate: ./test/generated/v2/schemas/$SimpleBoolean.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $SimpleBoolean = {
    type: 'boolean',
    description: \`This is a simple boolean\`,
} as const;
"
`;

exports[`v2 should generate: ./test/generated/v2/schemas/$SimpleFile.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $SimpleFile = {
    type: 'binary',
    description: \`This is a simple file\`,
} as const;
"
`;

exports[`v2 should generate: ./test/generated/v2/schemas/$SimpleInteger.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $SimpleInteger = {
    type: 'number',
    description: \`This is a simple number\`,
} as const;
"
`;

exports[`v2 should generate: ./test/generated/v2/schemas/$SimpleReference.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $SimpleReference = {
    type: 'ModelWithString',
    description: \`This is a simple reference\`,
} as const;
"
`;

exports[`v2 should generate: ./test/generated/v2/schemas/$SimpleString.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $SimpleString = {
    type: 'string',
    description: \`This is a simple string\`,
} as const;
"
`;

exports[`v2 should generate: ./test/generated/v2/schemas/$SimpleStringWithPattern.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $SimpleStringWithPattern = {
    type: 'string',
    description: \`This is a simple string\`,
    maxLength: 64,
    pattern: '^[a-zA-Z0-9_]*$',
} as const;
"
`;

exports[`v2 should generate: ./test/generated/v2/services/CollectionFormatService.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { CancelablePromise } from '../core/CancelablePromise';
import { OpenAPI } from '../core/OpenAPI';
import { request as __request } from '../core/request';

export class CollectionFormatService {

    /**
     * @param parameterArrayCsv This is an array parameter that is sent as csv format (comma-separated values)
     * @param parameterArraySsv This is an array parameter that is sent as ssv format (space-separated values)
     * @param parameterArrayTsv This is an array parameter that is sent as tsv format (tab-separated values)
     * @param parameterArrayPipes This is an array parameter that is sent as pipes format (pipe-separated values)
     * @param parameterArrayMulti This is an array parameter that is sent as multi format (multiple parameter instances)
     * @throws ApiError
     */
    public static collectionFormat(
        parameterArrayCsv: Array<string>,
        parameterArraySsv: Array<string>,
        parameterArrayTsv: Array<string>,
        parameterArrayPipes: Array<string>,
        parameterArrayMulti: Array<string>,
    ): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/collectionFormat',
            query: {
                'parameterArrayCSV': parameterArrayCsv,
                'parameterArraySSV': parameterArraySsv,
                'parameterArrayTSV': parameterArrayTsv,
                'parameterArrayPipes': parameterArrayPipes,
                'parameterArrayMulti': parameterArrayMulti,
            },
        });
    }

}
"
`;

exports[`v2 should generate: ./test/generated/v2/services/ComplexService.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { ModelWithString } from '../models/ModelWithString';

import type { CancelablePromise } from '../core/CancelablePromise';
import { OpenAPI } from '../core/OpenAPI';
import { request as __request } from '../core/request';

export class ComplexService {

    /**
     * @param parameterObject Parameter containing object
     * @param parameterReference Parameter containing reference
     * @returns ModelWithString Successful response
     * @throws ApiError
     */
    public static complexTypes(
        parameterObject: {
            first?: {
                second?: {
                    third?: string;
                };
            };
        },
        parameterReference: ModelWithString,
    ): CancelablePromise<Array<ModelWithString>> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/complex',
            query: {
                'parameterObject': parameterObject,
                'parameterReference': parameterReference,
            },
            errors: {
                400: \`400 server error\`,
                500: \`500 server error\`,
            },
        });
    }

}
"
`;

exports[`v2 should generate: ./test/generated/v2/services/DefaultService.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { CancelablePromise } from '../core/CancelablePromise';
import { OpenAPI } from '../core/OpenAPI';
import { request as __request } from '../core/request';

export class DefaultService {

    /**
     * @throws ApiError
     */
    public static serviceWithEmptyTag(): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/no-tag',
        });
    }

}
"
`;

exports[`v2 should generate: ./test/generated/v2/services/DefaultsService.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { ModelWithString } from '../models/ModelWithString';

import type { CancelablePromise } from '../core/CancelablePromise';
import { OpenAPI } from '../core/OpenAPI';
import { request as __request } from '../core/request';

export class DefaultsService {

    /**
     * @param parameterString This is a simple string with default value
     * @param parameterNumber This is a simple number with default value
     * @param parameterBoolean This is a simple boolean with default value
     * @param parameterEnum This is a simple enum with default value
     * @param parameterModel This is a simple model with default value
     * @throws ApiError
     */
    public static callWithDefaultParameters(
        parameterString: string = 'Hello World!',
        parameterNumber: number = 123,
        parameterBoolean: boolean = true,
        parameterEnum: 'Success' | 'Warning' | 'Error' = 'Success',
        parameterModel: ModelWithString = {
            \\"prop\\": \\"Hello World!\\"
        },
    ): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/defaults',
            query: {
                'parameterString': parameterString,
                'parameterNumber': parameterNumber,
                'parameterBoolean': parameterBoolean,
                'parameterEnum': parameterEnum,
                'parameterModel': parameterModel,
            },
        });
    }

    /**
     * @param parameterString This is a simple string that is optional with default value
     * @param parameterNumber This is a simple number that is optional with default value
     * @param parameterBoolean This is a simple boolean that is optional with default value
     * @param parameterEnum This is a simple enum that is optional with default value
     * @param parameterModel This is a simple model that is optional with default value
     * @throws ApiError
     */
    public static callWithDefaultOptionalParameters(
        parameterString: string = 'Hello World!',
        parameterNumber: number = 123,
        parameterBoolean: boolean = true,
        parameterEnum: 'Success' | 'Warning' | 'Error' = 'Success',
        parameterModel: ModelWithString = {
            \\"prop\\": \\"Hello World!\\"
        },
    ): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v{api-version}/defaults',
            query: {
                'parameterString': parameterString,
                'parameterNumber': parameterNumber,
                'parameterBoolean': parameterBoolean,
                'parameterEnum': parameterEnum,
                'parameterModel': parameterModel,
            },
        });
    }

    /**
     * @param parameterStringWithNoDefault This is a string with no default
     * @param parameterOptionalStringWithDefault This is a optional string with default
     * @param parameterOptionalStringWithEmptyDefault This is a optional string with empty default
     * @param parameterOptionalStringWithNoDefault This is a optional string with no default
     * @param parameterStringWithDefault This is a string with default
     * @param parameterStringWithEmptyDefault This is a string with empty default
     * @param parameterStringNullableWithNoDefault This is a string that can be null with no default
     * @param parameterStringNullableWithDefault This is a string that can be null with default
     * @throws ApiError
     */
    public static callToTestOrderOfParams(
        parameterStringWithNoDefault: string,
        parameterOptionalStringWithDefault: string = 'Hello World!',
        parameterOptionalStringWithEmptyDefault: string = '',
        parameterOptionalStringWithNoDefault?: string,
        parameterStringWithDefault: string = 'Hello World!',
        parameterStringWithEmptyDefault: string = '',
        parameterStringNullableWithNoDefault?: string | null,
        parameterStringNullableWithDefault: string | null = null,
    ): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/v{api-version}/defaults',
            query: {
                'parameterOptionalStringWithDefault': parameterOptionalStringWithDefault,
                'parameterOptionalStringWithEmptyDefault': parameterOptionalStringWithEmptyDefault,
                'parameterOptionalStringWithNoDefault': parameterOptionalStringWithNoDefault,
                'parameterStringWithDefault': parameterStringWithDefault,
                'parameterStringWithEmptyDefault': parameterStringWithEmptyDefault,
                'parameterStringWithNoDefault': parameterStringWithNoDefault,
                'parameterStringNullableWithNoDefault': parameterStringNullableWithNoDefault,
                'parameterStringNullableWithDefault': parameterStringNullableWithDefault,
            },
        });
    }

}
"
`;

exports[`v2 should generate: ./test/generated/v2/services/DescriptionsService.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { CancelablePromise } from '../core/CancelablePromise';
import { OpenAPI } from '../core/OpenAPI';
import { request as __request } from '../core/request';

export class DescriptionsService {

    /**
     * @param parameterWithBreaks Testing multiline comments in string: First line
     * Second line
     *
     * Fourth line
     * @param parameterWithBackticks Testing backticks in string: \`backticks\` and \`\`\`multiple backticks\`\`\` should work
     * @param parameterWithSlashes Testing slashes in string: \\\\backwards\\\\\\\\\\\\ and /forwards/// should work
     * @param parameterWithExpressionPlaceholders Testing expression placeholders in string: \${expression} should work
     * @param parameterWithQuotes Testing quotes in string: 'single quote''' and \\"double quotes\\"\\"\\" should work
     * @param parameterWithReservedCharacters Testing reserved characters in string: * inline * and ** inline ** should work
     * @throws ApiError
     */
    public static callWithDescriptions(
        parameterWithBreaks?: string,
        parameterWithBackticks?: string,
        parameterWithSlashes?: string,
        parameterWithExpressionPlaceholders?: string,
        parameterWithQuotes?: string,
        parameterWithReservedCharacters?: string,
    ): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v{api-version}/descriptions/',
            query: {
                'parameterWithBreaks': parameterWithBreaks,
                'parameterWithBackticks': parameterWithBackticks,
                'parameterWithSlashes': parameterWithSlashes,
                'parameterWithExpressionPlaceholders': parameterWithExpressionPlaceholders,
                'parameterWithQuotes': parameterWithQuotes,
                'parameterWithReservedCharacters': parameterWithReservedCharacters,
            },
        });
    }

}
"
`;

exports[`v2 should generate: ./test/generated/v2/services/DuplicateService.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { CancelablePromise } from '../core/CancelablePromise';
import { OpenAPI } from '../core/OpenAPI';
import { request as __request } from '../core/request';

export class DuplicateService {

    /**
     * @throws ApiError
     */
    public static duplicateName(): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/duplicate',
        });
    }

    /**
     * @throws ApiError
     */
    public static duplicateName1(): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v{api-version}/duplicate',
        });
    }

    /**
     * @throws ApiError
     */
    public static duplicateName2(): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/v{api-version}/duplicate',
        });
    }

    /**
     * @throws ApiError
     */
    public static duplicateName3(): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v{api-version}/duplicate',
        });
    }

}
"
`;

exports[`v2 should generate: ./test/generated/v2/services/ErrorService.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { CancelablePromise } from '../core/CancelablePromise';
import { OpenAPI } from '../core/OpenAPI';
import { request as __request } from '../core/request';

export class ErrorService {

    /**
     * @param status Status code to return
     * @returns any Custom message: Successful response
     * @throws ApiError
     */
    public static testErrorCode(
        status: string,
    ): CancelablePromise<any> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v{api-version}/error',
            query: {
                'status': status,
            },
            errors: {
                500: \`Custom message: Internal Server Error\`,
                501: \`Custom message: Not Implemented\`,
                502: \`Custom message: Bad Gateway\`,
                503: \`Custom message: Service Unavailable\`,
            },
        });
    }

}
"
`;

exports[`v2 should generate: ./test/generated/v2/services/HeaderService.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { CancelablePromise } from '../core/CancelablePromise';
import { OpenAPI } from '../core/OpenAPI';
import { request as __request } from '../core/request';

export class HeaderService {

    /**
     * @returns string Successful response
     * @throws ApiError
     */
    public static callWithResultFromHeader(): CancelablePromise<string> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v{api-version}/header',
            responseHeader: 'operation-location',
            errors: {
                400: \`400 server error\`,
                500: \`500 server error\`,
            },
        });
    }

}
"
`;

exports[`v2 should generate: ./test/generated/v2/services/MultipleTags1Service.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { CancelablePromise } from '../core/CancelablePromise';
import { OpenAPI } from '../core/OpenAPI';
import { request as __request } from '../core/request';

export class MultipleTags1Service {

    /**
     * @returns void
     * @throws ApiError
     */
    public static dummyA(): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/multiple-tags/a',
        });
    }

    /**
     * @returns void
     * @throws ApiError
     */
    public static dummyB(): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/multiple-tags/b',
        });
    }

}
"
`;

exports[`v2 should generate: ./test/generated/v2/services/MultipleTags2Service.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { CancelablePromise } from '../core/CancelablePromise';
import { OpenAPI } from '../core/OpenAPI';
import { request as __request } from '../core/request';

export class MultipleTags2Service {

    /**
     * @returns void
     * @throws ApiError
     */
    public static dummyA(): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/multiple-tags/a',
        });
    }

    /**
     * @returns void
     * @throws ApiError
     */
    public static dummyB(): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/multiple-tags/b',
        });
    }

}
"
`;

exports[`v2 should generate: ./test/generated/v2/services/MultipleTags3Service.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { CancelablePromise } from '../core/CancelablePromise';
import { OpenAPI } from '../core/OpenAPI';
import { request as __request } from '../core/request';

export class MultipleTags3Service {

    /**
     * @returns void
     * @throws ApiError
     */
    public static dummyB(): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/multiple-tags/b',
        });
    }

}
"
`;

exports[`v2 should generate: ./test/generated/v2/services/NoContentService.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { CancelablePromise } from '../core/CancelablePromise';
import { OpenAPI } from '../core/OpenAPI';
import { request as __request } from '../core/request';

export class NoContentService {

    /**
     * @returns void
     * @throws ApiError
     */
    public static callWithNoContentResponse(): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/no-content',
        });
    }

}
"
`;

exports[`v2 should generate: ./test/generated/v2/services/ParametersService.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { CancelablePromise } from '../core/CancelablePromise';
import { OpenAPI } from '../core/OpenAPI';
import { request as __request } from '../core/request';

export class ParametersService {

    /**
     * @param parameterHeader This is the parameter that goes into the header
     * @param parameterQuery This is the parameter that goes into the query params
     * @param parameterForm This is the parameter that goes into the form data
     * @param parameterBody This is the parameter that is sent as request body
     * @param parameterPath This is the parameter that goes into the path
     * @throws ApiError
     */
    public static callWithParameters(
        parameterHeader: string,
        parameterQuery: string,
        parameterForm: string,
        parameterBody: string,
        parameterPath: string,
    ): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v{api-version}/parameters/{parameterPath}',
            path: {
                'parameterPath': parameterPath,
            },
            headers: {
                'parameterHeader': parameterHeader,
            },
            query: {
                'parameterQuery': parameterQuery,
            },
            formData: {
                'parameterForm': parameterForm,
            },
            body: parameterBody,
        });
    }

    /**
     * @param parameterHeader This is the parameter that goes into the request header
     * @param parameterQuery This is the parameter that goes into the request query params
     * @param parameterForm This is the parameter that goes into the request form data
     * @param parameterBody This is the parameter that is sent as request body
     * @param parameterPath1 This is the parameter that goes into the path
     * @param parameterPath2 This is the parameter that goes into the path
     * @param parameterPath3 This is the parameter that goes into the path
     * @param _default This is the parameter with a reserved keyword
     * @throws ApiError
     */
    public static callWithWeirdParameterNames(
        parameterHeader: string,
        parameterQuery: string,
        parameterForm: string,
        parameterBody: string,
        parameterPath1?: string,
        parameterPath2?: string,
        parameterPath3?: string,
        _default?: string,
    ): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v{api-version}/parameters/{parameter.path.1}/{parameter-path-2}/{PARAMETER-PATH-3}',
            path: {
                'parameter.path.1': parameterPath1,
                'parameter-path-2': parameterPath2,
                'PARAMETER-PATH-3': parameterPath3,
            },
            headers: {
                'parameter.header': parameterHeader,
            },
            query: {
                'default': _default,
                'parameter-query': parameterQuery,
            },
            formData: {
                'parameter_form': parameterForm,
            },
            body: parameterBody,
        });
    }

}
"
`;

exports[`v2 should generate: ./test/generated/v2/services/ResponseService.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { ModelThatExtends } from '../models/ModelThatExtends';
import type { ModelThatExtendsExtends } from '../models/ModelThatExtendsExtends';
import type { ModelWithString } from '../models/ModelWithString';

import type { CancelablePromise } from '../core/CancelablePromise';
import { OpenAPI } from '../core/OpenAPI';
import { request as __request } from '../core/request';

export class ResponseService {

    /**
     * @returns ModelWithString Message for default response
     * @throws ApiError
     */
    public static callWithResponse(): CancelablePromise<ModelWithString> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/response',
        });
    }

    /**
     * @returns ModelWithString Message for default response
     * @throws ApiError
     */
    public static callWithDuplicateResponses(): CancelablePromise<ModelWithString> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v{api-version}/response',
            errors: {
                500: \`Message for 500 error\`,
                501: \`Message for 501 error\`,
                502: \`Message for 502 error\`,
            },
        });
    }

    /**
     * @returns any Message for 200 response
     * @returns ModelWithString Message for default response
     * @returns ModelThatExtends Message for 201 response
     * @returns ModelThatExtendsExtends Message for 202 response
     * @throws ApiError
     */
    public static callWithResponses(): CancelablePromise<{
        readonly '@namespace.string'?: string;
        readonly '@namespace.integer'?: number;
        readonly value?: Array<ModelWithString>;
    } | ModelWithString | ModelThatExtends | ModelThatExtendsExtends> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/v{api-version}/response',
            errors: {
                500: \`Message for 500 error\`,
                501: \`Message for 501 error\`,
                502: \`Message for 502 error\`,
            },
        });
    }

}
"
`;

exports[`v2 should generate: ./test/generated/v2/services/SimpleService.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { CancelablePromise } from '../core/CancelablePromise';
import { OpenAPI } from '../core/OpenAPI';
import { request as __request } from '../core/request';

export class SimpleService {

    /**
     * @throws ApiError
     */
    public static getCallWithoutParametersAndResponse(): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/simple',
        });
    }

    /**
     * @throws ApiError
     */
    public static putCallWithoutParametersAndResponse(): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/v{api-version}/simple',
        });
    }

    /**
     * @throws ApiError
     */
    public static postCallWithoutParametersAndResponse(): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v{api-version}/simple',
        });
    }

    /**
     * @throws ApiError
     */
    public static deleteCallWithoutParametersAndResponse(): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v{api-version}/simple',
        });
    }

    /**
     * @throws ApiError
     */
    public static optionsCallWithoutParametersAndResponse(): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'OPTIONS',
            url: '/api/v{api-version}/simple',
        });
    }

    /**
     * @throws ApiError
     */
    public static headCallWithoutParametersAndResponse(): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'HEAD',
            url: '/api/v{api-version}/simple',
        });
    }

    /**
     * @throws ApiError
     */
    public static patchCallWithoutParametersAndResponse(): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v{api-version}/simple',
        });
    }

}
"
`;

exports[`v2 should generate: ./test/generated/v2/services/TypesService.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { CancelablePromise } from '../core/CancelablePromise';
import { OpenAPI } from '../core/OpenAPI';
import { request as __request } from '../core/request';

export class TypesService {

    /**
     * @param parameterArray This is an array parameter
     * @param parameterDictionary This is a dictionary parameter
     * @param parameterEnum This is an enum parameter
     * @param parameterNumber This is a number parameter
     * @param parameterString This is a string parameter
     * @param parameterBoolean This is a boolean parameter
     * @param parameterObject This is an object parameter
     * @param id This is a number parameter
     * @returns number Response is a simple number
     * @returns string Response is a simple string
     * @returns boolean Response is a simple boolean
     * @returns any Response is a simple object
     * @throws ApiError
     */
    public static types(
        parameterArray: Array<string>,
        parameterDictionary: Record<string, string>,
        parameterEnum: 'Success' | 'Warning' | 'Error',
        parameterNumber: number = 123,
        parameterString: string = 'default',
        parameterBoolean: boolean = true,
        parameterObject: any = null,
        id?: number,
    ): CancelablePromise<number | string | boolean | any> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/types',
            path: {
                'id': id,
            },
            query: {
                'parameterNumber': parameterNumber,
                'parameterString': parameterString,
                'parameterBoolean': parameterBoolean,
                'parameterObject': parameterObject,
                'parameterArray': parameterArray,
                'parameterDictionary': parameterDictionary,
                'parameterEnum': parameterEnum,
            },
        });
    }

}
"
`;

exports[`v3 should generate: ./test/generated/v3/core/ApiError.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { ApiRequestOptions } from './ApiRequestOptions';
import type { ApiResult } from './ApiResult';

export class ApiError extends Error {
    public readonly url: string;
    public readonly status: number;
    public readonly statusText: string;
    public readonly body: any;
    public readonly request: ApiRequestOptions;

    constructor(request: ApiRequestOptions, response: ApiResult, message: string) {
        super(message);

        this.name = 'ApiError';
        this.url = response.url;
        this.status = response.status;
        this.statusText = response.statusText;
        this.body = response.body;
        this.request = request;
    }
}
"
`;

exports[`v3 should generate: ./test/generated/v3/core/ApiRequestOptions.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export type ApiRequestOptions = {
    readonly method: 'GET' | 'PUT' | 'POST' | 'DELETE' | 'OPTIONS' | 'HEAD' | 'PATCH';
    readonly url: string;
    readonly path?: Record<string, any>;
    readonly cookies?: Record<string, any>;
    readonly headers?: Record<string, any>;
    readonly query?: Record<string, any>;
    readonly formData?: Record<string, any>;
    readonly body?: any;
    readonly mediaType?: string;
    readonly responseHeader?: string;
    readonly errors?: Record<number, string>;
};
"
`;

exports[`v3 should generate: ./test/generated/v3/core/ApiResult.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export type ApiResult = {
    readonly url: string;
    readonly ok: boolean;
    readonly status: number;
    readonly statusText: string;
    readonly body: any;
};
"
`;

exports[`v3 should generate: ./test/generated/v3/core/CancelablePromise.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export class CancelError extends Error {

    constructor(message: string) {
        super(message);
        this.name = 'CancelError';
    }

    public get isCancelled(): boolean {
        return true;
    }
}

export interface OnCancel {
    readonly isResolved: boolean;
    readonly isRejected: boolean;
    readonly isCancelled: boolean;

    (cancelHandler: () => void): void;
}

export class CancelablePromise<T> implements Promise<T> {
    readonly [Symbol.toStringTag]!: string;

    private _isResolved: boolean;
    private _isRejected: boolean;
    private _isCancelled: boolean;
    private readonly _cancelHandlers: (() => void)[];
    private readonly _promise: Promise<T>;
    private _resolve?: (value: T | PromiseLike<T>) => void;
    private _reject?: (reason?: any) => void;

    constructor(
        executor: (
            resolve: (value: T | PromiseLike<T>) => void,
            reject: (reason?: any) => void,
            onCancel: OnCancel
        ) => void
    ) {
        this._isResolved = false;
        this._isRejected = false;
        this._isCancelled = false;
        this._cancelHandlers = [];
        this._promise = new Promise<T>((resolve, reject) => {
            this._resolve = resolve;
            this._reject = reject;

            const onResolve = (value: T | PromiseLike<T>): void => {
                if (this._isResolved || this._isRejected || this._isCancelled) {
                    return;
                }
                this._isResolved = true;
                this._resolve?.(value);
            };

            const onReject = (reason?: any): void => {
                if (this._isResolved || this._isRejected || this._isCancelled) {
                    return;
                }
                this._isRejected = true;
                this._reject?.(reason);
            };

            const onCancel = (cancelHandler: () => void): void => {
                if (this._isResolved || this._isRejected || this._isCancelled) {
                    return;
                }
                this._cancelHandlers.push(cancelHandler);
            };

            Object.defineProperty(onCancel, 'isResolved', {
                get: (): boolean => this._isResolved,
            });

            Object.defineProperty(onCancel, 'isRejected', {
                get: (): boolean => this._isRejected,
            });

            Object.defineProperty(onCancel, 'isCancelled', {
                get: (): boolean => this._isCancelled,
            });

            return executor(onResolve, onReject, onCancel as OnCancel);
        });
    }

    public then<TResult1 = T, TResult2 = never>(
        onFulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | null,
        onRejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | null
    ): Promise<TResult1 | TResult2> {
        return this._promise.then(onFulfilled, onRejected);
    }

    public catch<TResult = never>(
        onRejected?: ((reason: any) => TResult | PromiseLike<TResult>) | null
    ): Promise<T | TResult> {
        return this._promise.catch(onRejected);
    }

    public finally(onFinally?: (() => void) | null): Promise<T> {
        return this._promise.finally(onFinally);
    }

    public cancel(): void {
        if (this._isResolved || this._isRejected || this._isCancelled) {
            return;
        }
        this._isCancelled = true;
        if (this._cancelHandlers.length) {
            try {
                for (const cancelHandler of this._cancelHandlers) {
                    cancelHandler();
                }
            } catch (error) {
                console.warn('Cancellation threw an error', error);
                return;
            }
        }
        this._cancelHandlers.length = 0;
        this._reject?.(new CancelError('Request aborted'));
    }

    public get isCancelled(): boolean {
        return this._isCancelled;
    }
}
"
`;

exports[`v3 should generate: ./test/generated/v3/core/OpenAPI.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { ApiRequestOptions } from './ApiRequestOptions';

type Resolver<T> = (options: ApiRequestOptions) => Promise<T>;
type Headers = Record<string, string>;

export type OpenAPIConfig = {
    BASE: string;
    VERSION: string;
    WITH_CREDENTIALS: boolean;
    CREDENTIALS: 'include' | 'omit' | 'same-origin';
    TOKEN?: string | Resolver<string>;
    USERNAME?: string | Resolver<string>;
    PASSWORD?: string | Resolver<string>;
    HEADERS?: Headers | Resolver<Headers>;
    ENCODE_PATH?: (path: string) => string;
};

export const OpenAPI: OpenAPIConfig = {
    BASE: 'http://localhost:3000/base',
    VERSION: '1.0',
    WITH_CREDENTIALS: false,
    CREDENTIALS: 'include',
    TOKEN: undefined,
    USERNAME: undefined,
    PASSWORD: undefined,
    HEADERS: undefined,
    ENCODE_PATH: undefined,
};
"
`;

exports[`v3 should generate: ./test/generated/v3/core/request.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import { ApiError } from './ApiError';
import type { ApiRequestOptions } from './ApiRequestOptions';
import type { ApiResult } from './ApiResult';
import { CancelablePromise } from './CancelablePromise';
import type { OnCancel } from './CancelablePromise';
import type { OpenAPIConfig } from './OpenAPI';

const isDefined = <T>(value: T | null | undefined): value is Exclude<T, null | undefined> => {
    return value !== undefined && value !== null;
};

const isString = (value: any): value is string => {
    return typeof value === 'string';
};

const isStringWithValue = (value: any): value is string => {
    return isString(value) && value !== '';
};

const isBlob = (value: any): value is Blob => {
    return (
        typeof value === 'object' &&
        typeof value.type === 'string' &&
        typeof value.stream === 'function' &&
        typeof value.arrayBuffer === 'function' &&
        typeof value.constructor === 'function' &&
        typeof value.constructor.name === 'string' &&
        /^(Blob|File)$/.test(value.constructor.name) &&
        /^(Blob|File)$/.test(value[Symbol.toStringTag])
    );
};

const isFormData = (value: any): value is FormData => {
    return value instanceof FormData;
};

const base64 = (str: string): string => {
    try {
        return btoa(str);
    } catch (err) {
        // @ts-ignore
        return Buffer.from(str).toString('base64');
    }
};

const getQueryString = (params: Record<string, any>): string => {
    const qs: string[] = [];

    const append = (key: string, value: any) => {
        qs.push(\`\${encodeURIComponent(key)}=\${encodeURIComponent(String(value))}\`);
    };

    const process = (key: string, value: any) => {
        if (isDefined(value)) {
            if (Array.isArray(value)) {
                value.forEach(v => {
                    process(key, v);
                });
            } else if (typeof value === 'object') {
                Object.entries(value).forEach(([k, v]) => {
                    process(\`\${key}[\${k}]\`, v);
                });
            } else {
                append(key, value);
            }
        }
    };

    Object.entries(params).forEach(([key, value]) => {
        process(key, value);
    });

    if (qs.length > 0) {
        return \`?\${qs.join('&')}\`;
    }

    return '';
};

const getUrl = (config: OpenAPIConfig, options: ApiRequestOptions): string => {
    const encoder = config.ENCODE_PATH || encodeURI;

    const path = options.url
        .replace('{api-version}', config.VERSION)
        .replace(/{(.*?)}/g, (substring: string, group: string) => {
            if (options.path?.hasOwnProperty(group)) {
                return encoder(String(options.path[group]));
            }
            return substring;
        });

    const url = \`\${config.BASE}\${path}\`;
    if (options.query) {
        return \`\${url}\${getQueryString(options.query)}\`;
    }
    return url;
};

const getFormData = (options: ApiRequestOptions): FormData | undefined => {
    if (options.formData) {
        const formData = new FormData();

        const process = (key: string, value: any) => {
            if (isString(value) || isBlob(value)) {
                formData.append(key, value);
            } else {
                formData.append(key, JSON.stringify(value));
            }
        };

        Object.entries(options.formData)
            .filter(([_, value]) => isDefined(value))
            .forEach(([key, value]) => {
                if (Array.isArray(value)) {
                    value.forEach(v => process(key, v));
                } else {
                    process(key, value);
                }
            });

        return formData;
    }
    return undefined;
};

type Resolver<T> = (options: ApiRequestOptions) => Promise<T>;

const resolve = async <T>(options: ApiRequestOptions, resolver?: T | Resolver<T>): Promise<T | undefined> => {
    if (typeof resolver === 'function') {
        return (resolver as Resolver<T>)(options);
    }
    return resolver;
};

const getHeaders = async (config: OpenAPIConfig, options: ApiRequestOptions): Promise<Headers> => {
    const token = await resolve(options, config.TOKEN);
    const username = await resolve(options, config.USERNAME);
    const password = await resolve(options, config.PASSWORD);
    const additionalHeaders = await resolve(options, config.HEADERS);

    const headers = Object.entries({
        Accept: 'application/json',
        ...additionalHeaders,
        ...options.headers,
    })
        .filter(([_, value]) => isDefined(value))
        .reduce((headers, [key, value]) => ({
            ...headers,
            [key]: String(value),
        }), {} as Record<string, string>);

    if (isStringWithValue(token)) {
        headers['Authorization'] = \`Bearer \${token}\`;
    }

    if (isStringWithValue(username) && isStringWithValue(password)) {
        const credentials = base64(\`\${username}:\${password}\`);
        headers['Authorization'] = \`Basic \${credentials}\`;
    }

    if (options.body) {
        if (options.mediaType) {
            headers['Content-Type'] = options.mediaType;
        } else if (isBlob(options.body)) {
            headers['Content-Type'] = options.body.type || 'application/octet-stream';
        } else if (isString(options.body)) {
            headers['Content-Type'] = 'text/plain';
        } else if (!isFormData(options.body)) {
            headers['Content-Type'] = 'application/json';
        }
    }

    return new Headers(headers);
};

const getRequestBody = (options: ApiRequestOptions): any => {
    if (options.body !== undefined) {
        if (options.mediaType?.includes('/json')) {
            return JSON.stringify(options.body)
        } else if (isString(options.body) || isBlob(options.body) || isFormData(options.body)) {
            return options.body;
        } else {
            return JSON.stringify(options.body);
        }
    }
    return undefined;
};

export const sendRequest = async (
    config: OpenAPIConfig,
    options: ApiRequestOptions,
    url: string,
    body: any,
    formData: FormData | undefined,
    headers: Headers,
    onCancel: OnCancel
): Promise<Response> => {
    const controller = new AbortController();

    const request: RequestInit = {
        headers,
        body: body ?? formData,
        method: options.method,
        signal: controller.signal,
    };

    if (config.WITH_CREDENTIALS) {
        request.credentials = config.CREDENTIALS;
    }

    onCancel(() => controller.abort());

    return await fetch(url, request);
};

const getResponseHeader = (response: Response, responseHeader?: string): string | undefined => {
    if (responseHeader) {
        const content = response.headers.get(responseHeader);
        if (isString(content)) {
            return content;
        }
    }
    return undefined;
};

const getResponseBody = async (response: Response): Promise<any> => {
    if (response.status !== 204) {
        try {
            const contentType = response.headers.get('Content-Type');
            if (contentType) {
                const isJSON = contentType.toLowerCase().startsWith('application/json');
                if (isJSON) {
                    return await response.json();
                } else {
                    return await response.text();
                }
            }
        } catch (error) {
            console.error(error);
        }
    }
    return undefined;
};

const catchErrorCodes = (options: ApiRequestOptions, result: ApiResult): void => {
    const errors: Record<number, string> = {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Internal Server Error',
        502: 'Bad Gateway',
        503: 'Service Unavailable',
        ...options.errors,
    }

    const error = errors[result.status];
    if (error) {
        throw new ApiError(options, result, error);
    }

    if (!result.ok) {
        throw new ApiError(options, result, 'Generic Error');
    }
};

/**
 * Request method
 * @param config The OpenAPI configuration object
 * @param options The request options from the service
 * @returns CancelablePromise<T>
 * @throws ApiError
 */
export const request = <T>(config: OpenAPIConfig, options: ApiRequestOptions): CancelablePromise<T> => {
    return new CancelablePromise(async (resolve, reject, onCancel) => {
        try {
            const url = getUrl(config, options);
            const formData = getFormData(options);
            const body = getRequestBody(options);
            const headers = await getHeaders(config, options);

            if (!onCancel.isCancelled) {
                const response = await sendRequest(config, options, url, body, formData, headers, onCancel);
                const responseBody = await getResponseBody(response);
                const responseHeader = getResponseHeader(response, options.responseHeader);

                const result: ApiResult = {
                    url,
                    ok: response.ok,
                    status: response.status,
                    statusText: response.statusText,
                    body: responseHeader ?? responseBody,
                };

                catchErrorCodes(options, result);

                resolve(result.body);
            }
        } catch (error) {
            reject(error);
        }
    });
};
"
`;

exports[`v3 should generate: ./test/generated/v3/dto/ArrayWithArrayNest.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

import type { ModelWithStringNest } from './ModelWithStringNest';

// ELSE EXPORT TYPE
/**
 * This is a simple array containing an array
 */
export type ArrayWithArrayNest = Array<Array<ModelWithString>>;
"
`;

exports[`v3 should generate: ./test/generated/v3/dto/ArrayWithBooleansNest.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

// ELSE EXPORT TYPE
/**
 * This is a simple array with booleans
 */
export type ArrayWithBooleansNest = Array<boolean>;
"
`;

exports[`v3 should generate: ./test/generated/v3/dto/ArrayWithNumbersNest.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

// ELSE EXPORT TYPE
/**
 * This is a simple array with numbers
 */
export type ArrayWithNumbersNest = Array<number>;
"
`;

exports[`v3 should generate: ./test/generated/v3/dto/ArrayWithPropertiesNest.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

// ELSE EXPORT TYPE
/**
 * This is a simple array with properties
 */
export type ArrayWithPropertiesNest = Array<{
    foo?: string;
    bar?: string;
}>;
"
`;

exports[`v3 should generate: ./test/generated/v3/dto/ArrayWithReferencesNest.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

import type { ModelWithStringNest } from './ModelWithStringNest';

// ELSE EXPORT TYPE
/**
 * This is a simple array with references
 */
export type ArrayWithReferencesNest = Array<ModelWithStringNest>;
"
`;

exports[`v3 should generate: ./test/generated/v3/dto/ArrayWithStringsNest.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

// ELSE EXPORT TYPE
/**
 * This is a simple array with strings
 */
export type ArrayWithStringsNest = Array<string>;
"
`;

exports[`v3 should generate: ./test/generated/v3/dto/CommentWithBackticksNest.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

// ELSE EXPORT TYPE
/**
 * Testing backticks in string: \`backticks\` and \`\`\`multiple backticks\`\`\` should work
 */
export type CommentWithBackticksNest = number;
"
`;

exports[`v3 should generate: ./test/generated/v3/dto/CommentWithBreaksNest.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

// ELSE EXPORT TYPE
/**
 * Testing multiline comments in string: First line
 * Second line
 *
 * Fourth line
 */
export type CommentWithBreaksNest = number;
"
`;

exports[`v3 should generate: ./test/generated/v3/dto/CommentWithExpressionPlaceholdersNest.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

// ELSE EXPORT TYPE
/**
 * Testing expression placeholders in string: \${expression} should work
 */
export type CommentWithExpressionPlaceholdersNest = number;
"
`;

exports[`v3 should generate: ./test/generated/v3/dto/CommentWithQuotesNest.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

// ELSE EXPORT TYPE
/**
 * Testing quotes in string: 'single quote''' and \\"double quotes\\"\\"\\" should work
 */
export type CommentWithQuotesNest = number;
"
`;

exports[`v3 should generate: ./test/generated/v3/dto/CommentWithReservedCharactersNest.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

// ELSE EXPORT TYPE
/**
 * Testing reserved characters in string: * inline * and ** inline ** should work
 */
export type CommentWithReservedCharactersNest = number;
"
`;

exports[`v3 should generate: ./test/generated/v3/dto/CommentWithSlashesNest.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

// ELSE EXPORT TYPE
/**
 * Testing slashes in string: \\\\backwards\\\\\\\\\\\\ and /forwards/// should work
 */
export type CommentWithSlashesNest = number;
"
`;

exports[`v3 should generate: ./test/generated/v3/dto/CompositionBaseModelNest.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

// interface
/**
 * This is a base model with two simple optional properties
 */
export type CompositionBaseModelNest = {
    firstName?: string;
    lastname?: string;
};

"
`;

exports[`v3 should generate: ./test/generated/v3/dto/CompositionExtendedModelNest.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

import type { CompositionBaseModelNest } from './CompositionBaseModelNest';

// all-of
/**
 * This is a model that extends the base model
 */
export type CompositionExtendedModelNest = (CompositionBaseModelNest & {
    firstName: string;
    lastname: string;
    age: number;
});

"
`;

exports[`v3 should generate: ./test/generated/v3/dto/CompositionWithAllOfAndNullableNest.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

import type { ModelWithArrayNest } from './ModelWithArrayNest';
import type { ModelWithDictionaryNest } from './ModelWithDictionaryNest';
import type { ModelWithEnumNest } from './ModelWithEnumNest';

// interface
/**
 * This is a model with one property with a 'all of' relationship
 */
export type CompositionWithAllOfAndNullableNest = {
    propA?: ({
        boolean?: boolean;
    } & ModelWithEnumNest & ModelWithArrayNest & ModelWithDictionaryNest) | null;
};

"
`;

exports[`v3 should generate: ./test/generated/v3/dto/CompositionWithAnyOfAndNullableNest.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

import type { ModelWithArrayNest } from './ModelWithArrayNest';
import type { ModelWithDictionaryNest } from './ModelWithDictionaryNest';
import type { ModelWithEnumNest } from './ModelWithEnumNest';

// interface
/**
 * This is a model with one property with a 'any of' relationship
 */
export type CompositionWithAnyOfAndNullableNest = {
    propA?: ({
        boolean?: boolean;
    } | ModelWithEnumNest | ModelWithArrayNest | ModelWithDictionaryNest) | null;
};

"
`;

exports[`v3 should generate: ./test/generated/v3/dto/CompositionWithAnyOfAnonymousNest.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

// interface
/**
 * This is a model with one property with a 'any of' relationship where the options are not $ref
 */
export type CompositionWithAnyOfAnonymousNest = {
    propA?: ({
        propA?: string;
    } | string | number);
};

"
`;

exports[`v3 should generate: ./test/generated/v3/dto/CompositionWithAnyOfNest.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

import type { ModelWithArrayNest } from './ModelWithArrayNest';
import type { ModelWithDictionaryNest } from './ModelWithDictionaryNest';
import type { ModelWithEnumNest } from './ModelWithEnumNest';
import type { ModelWithStringNest } from './ModelWithStringNest';

// interface
/**
 * This is a model with one property with a 'any of' relationship
 */
export type CompositionWithAnyOfNest = {
    propA?: (ModelWithStringNest | ModelWithEnumNest | ModelWithArrayNest | ModelWithDictionaryNest);
};

"
`;

exports[`v3 should generate: ./test/generated/v3/dto/CompositionWithOneOfAndComplexArrayDictionaryNest.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

// interface
/**
 * This is a model that contains a dictionary of complex arrays (composited) within composition
 */
export type CompositionWithOneOfAndComplexArrayDictionaryNest = {
    propA?: (boolean | Record<string, Array<(number | string)>>);
};

"
`;

exports[`v3 should generate: ./test/generated/v3/dto/CompositionWithOneOfAndNullableNest.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

import type { ModelWithArrayNest } from './ModelWithArrayNest';
import type { ModelWithDictionaryNest } from './ModelWithDictionaryNest';
import type { ModelWithEnumNest } from './ModelWithEnumNest';

// interface
/**
 * This is a model with one property with a 'one of' relationship
 */
export type CompositionWithOneOfAndNullableNest = {
    propA?: ({
        boolean?: boolean;
    } | ModelWithEnumNest | ModelWithArrayNest | ModelWithDictionaryNest) | null;
};

"
`;

exports[`v3 should generate: ./test/generated/v3/dto/CompositionWithOneOfAndSimpleArrayDictionaryNest.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

// interface
/**
 * This is a model that contains a dictionary of simple arrays within composition
 */
export type CompositionWithOneOfAndSimpleArrayDictionaryNest = {
    propA?: (boolean | Record<string, Array<boolean>>);
};

"
`;

exports[`v3 should generate: ./test/generated/v3/dto/CompositionWithOneOfAndSimpleDictionaryNest.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

// interface
/**
 * This is a model that contains a simple dictionary within composition
 */
export type CompositionWithOneOfAndSimpleDictionaryNest = {
    propA?: (boolean | Record<string, number>);
};

"
`;

exports[`v3 should generate: ./test/generated/v3/dto/CompositionWithOneOfAnonymousNest.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

// interface
/**
 * This is a model with one property with a 'one of' relationship where the options are not $ref
 */
export type CompositionWithOneOfAnonymousNest = {
    propA?: ({
        propA?: string;
    } | string | number);
};

"
`;

exports[`v3 should generate: ./test/generated/v3/dto/CompositionWithOneOfDiscriminatorNest.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

import type { ModelCircleNest } from './ModelCircleNest';
import type { ModelSquareNest } from './ModelSquareNest';

// one-of
/**
 * This is a model with one property with a 'one of' relationship where the options are not $ref
 */
export type CompositionWithOneOfDiscriminatorNest = (ModelCircleNest | ModelSquareNest);

"
`;

exports[`v3 should generate: ./test/generated/v3/dto/CompositionWithOneOfNest.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

import type { ModelWithArrayNest } from './ModelWithArrayNest';
import type { ModelWithDictionaryNest } from './ModelWithDictionaryNest';
import type { ModelWithEnumNest } from './ModelWithEnumNest';
import type { ModelWithStringNest } from './ModelWithStringNest';

// interface
/**
 * This is a model with one property with a 'one of' relationship
 */
export type CompositionWithOneOfNest = {
    propA?: (ModelWithStringNest | ModelWithEnumNest | ModelWithArrayNest | ModelWithDictionaryNest);
};

"
`;

exports[`v3 should generate: ./test/generated/v3/dto/CustomPredefinedNestFieldsNest.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

import type { DateISONest } from './DateISONest';
import type { MongoObjectIdNest } from './MongoObjectIdNest';

// interface
/**
 * This is a simple reference
 */
export type CustomPredefinedNestFieldsNest = {
    id?: MongoObjectIdNest;
    date?: DateISONest;
};

"
`;

exports[`v3 should generate: ./test/generated/v3/dto/DateISONest.ts 1`] = `
"
          export type DateISONest = Date;
          "
`;

exports[`v3 should generate: ./test/generated/v3/dto/DeprecatedModelNest.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

// interface
/**
 * This is a deprecated model with a deprecated property
 * @deprecated
 */
export type DeprecatedModelNest = {
    /**
     * This is a deprecated property
     * @deprecated
     */
    prop?: string;
};

"
`;

exports[`v3 should generate: ./test/generated/v3/dto/DictionaryWithArrayNest.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

import type { ModelWithStringNest } from './ModelWithStringNest';

// ELSE EXPORT TYPE
/**
 * This is a complex dictionary
 */
export type DictionaryWithArrayNest = Record<string, Array<ModelWithString>>;
"
`;

exports[`v3 should generate: ./test/generated/v3/dto/DictionaryWithDictionaryNest.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

// ELSE EXPORT TYPE
/**
 * This is a string dictionary
 */
export type DictionaryWithDictionaryNest = Record<string, Record<string, string>>;
"
`;

exports[`v3 should generate: ./test/generated/v3/dto/DictionaryWithPropertiesNest.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

// ELSE EXPORT TYPE
/**
 * This is a complex dictionary
 */
export type DictionaryWithPropertiesNest = Record<string, {
    foo?: string;
    bar?: string;
}>;
"
`;

exports[`v3 should generate: ./test/generated/v3/dto/DictionaryWithReferenceNest.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

import type { ModelWithStringNest } from './ModelWithStringNest';

// ELSE EXPORT TYPE
/**
 * This is a string reference
 */
export type DictionaryWithReferenceNest = Record<string, ModelWithStringNest>;
"
`;

exports[`v3 should generate: ./test/generated/v3/dto/DictionaryWithStringNest.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

// ELSE EXPORT TYPE
/**
 * This is a string dictionary
 */
export type DictionaryWithStringNest = Record<string, string>;
"
`;

exports[`v3 should generate: ./test/generated/v3/dto/EnumFromDescriptionNest.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

// ELSE EXPORT TYPE
/**
 * Success=1,Warning=2,Error=3
 */
export type EnumFromDescriptionNest = number;
"
`;

exports[`v3 should generate: ./test/generated/v3/dto/EnumViaOneOfNumericNest.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * OpenApi 3.1 style numeric enum
 */
export enum EnumViaOneOfNumericNest {
    /**
     * Success
     */
    SUCCESS = 0,
    /**
     * Warning
     */
    WARNING = 1,
    /**
     * Error
     */
    ERROR = 3,
}

/**
 * Возвращает описание для элемента enum
 * OpenApi 3.1 style numeric enum
 * @param {EnumViaOneOfNumericNest} val Значение из EnumViaOneOfNumericNest
 * @return {string} описание для значения
 */
export const descrEnumViaOneOfNumericNest = (val: EnumViaOneOfNumericNest):string => {
    switch (val) {
        case 0:
        return 'Success'
        case 1:
        return 'Warning'
        case 3:
        return 'Error'
        default:
        return ''
    }
}
"
`;

exports[`v3 should generate: ./test/generated/v3/dto/EnumViaOneOfStringNest.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * OpenApi 3.1 style titled enum
 */
export enum EnumViaOneOfStringNest {
    /**
     * Success
     */
    SUCCESS = 'SUCCESS',
    /**
     * Warning
     */
    SUCCESS_NOT = 'SUCCESS_NOT',
    /**
     * Error
     */
    ERROR = 'ERROR',
}

/**
 * Возвращает описание для элемента enum
 * OpenApi 3.1 style titled enum
 * @param {EnumViaOneOfStringNest} val Значение из EnumViaOneOfStringNest
 * @return {string} описание для значения
 */
export const descrEnumViaOneOfStringNest = (val: EnumViaOneOfStringNest):string => {
    switch (val) {
        case 'SUCCESS':
        return 'Success'
        case 'SUCCESS_NOT':
        return 'Warning'
        case 'ERROR':
        return 'Error'
        default:
        return ''
    }
}
"
`;

exports[`v3 should generate: ./test/generated/v3/dto/EnumWithExtensionsNest.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a simple enum with numbers
 */
export enum EnumWithExtensionsNest {
    /**
     * Used when the status of something is successful
     */
    CUSTOM_SUCCESS = 200,
    /**
     * Used when the status of something has a warning
     */
    CUSTOM_WARNING = 400,
    /**
     * Used when the status of something has an error
     */
    CUSTOM_ERROR = 500,
}

/**
 * Возвращает описание для элемента enum
 * This is a simple enum with numbers
 * @param {EnumWithExtensionsNest} val Значение из EnumWithExtensionsNest
 * @return {string} описание для значения
 */
export const descrEnumWithExtensionsNest = (val: EnumWithExtensionsNest):string => {
    switch (val) {
        case 200:
        return 'Used when the status of something is successful'
        case 400:
        return 'Used when the status of something has a warning'
        case 500:
        return 'Used when the status of something has an error'
        default:
        return ''
    }
}
"
`;

exports[`v3 should generate: ./test/generated/v3/dto/EnumWithNumbersNest.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a simple enum with numbers
 */
export enum EnumWithNumbersNest {
    '_0' = 0,
    '_1' = 1,
    '_2' = 2,
    '_3' = 3,
    '_1.1' = 1.1,
    '_1.2' = 1.2,
    '_1.3' = 1.3,
    '_100' = 100,
    '_200' = 200,
    '_300' = 300,
    '_-100' = -100,
    '_-200' = -200,
    '_-300' = -300,
    '_-1.1' = -1.1,
    '_-1.2' = -1.2,
    '_-1.3' = -1.3,
}

/**
 * Возвращает описание для элемента enum
 * This is a simple enum with numbers
 * @param {EnumWithNumbersNest} val Значение из EnumWithNumbersNest
 * @return {string} описание для значения
 */
export const descrEnumWithNumbersNest = (val: EnumWithNumbersNest):string => {
    switch (val) {
        default:
        return ''
    }
}
"
`;

exports[`v3 should generate: ./test/generated/v3/dto/EnumWithStringsNest.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a simple enum with strings
 */
export enum EnumWithStringsNest {
    SUCCESS = 'Success',
    WARNING = 'Warning',
    ERROR = 'Error',
    _SINGLE_QUOTE_ = '\\\\'Single Quote\\\\'',
    _DOUBLE_QUOTES_ = '\\"Double Quotes\\"',
}

/**
 * Возвращает описание для элемента enum
 * This is a simple enum with strings
 * @param {EnumWithStringsNest} val Значение из EnumWithStringsNest
 * @return {string} описание для значения
 */
export const descrEnumWithStringsNest = (val: EnumWithStringsNest):string => {
    switch (val) {
        default:
        return ''
    }
}
"
`;

exports[`v3 should generate: ./test/generated/v3/dto/FileNest.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

// interface
export type FileNest = {
    readonly id?: string;
    readonly updated_at?: string;
    readonly created_at?: string;
    mime: string;
    readonly file?: string;
};

"
`;

exports[`v3 should generate: ./test/generated/v3/dto/ModelCircleNest.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

// interface
/**
 * Circle
 */
export type ModelCircleNest = {
    kind: 'circle'Nest;
    radius?: number;
};

"
`;

exports[`v3 should generate: ./test/generated/v3/dto/ModelSquareNest.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

// interface
/**
 * Square
 */
export type ModelSquareNest = {
    kind: 'square'Nest;
    sideLength?: number;
};

"
`;

exports[`v3 should generate: ./test/generated/v3/dto/ModelThatExtendsExtendsNest.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

import type { ModelThatExtendsNest } from './ModelThatExtendsNest';
import type { ModelWithStringNest } from './ModelWithStringNest';

// all-of
/**
 * This is a model that extends another model
 */
export type ModelThatExtendsExtendsNest = (ModelWithStringNest & ModelThatExtendsNest & {
    propExtendsC?: string;
    propExtendsD?: ModelWithStringNest;
});

"
`;

exports[`v3 should generate: ./test/generated/v3/dto/ModelThatExtendsNest.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

import type { ModelWithStringNest } from './ModelWithStringNest';

// all-of
/**
 * This is a model that extends another model
 */
export type ModelThatExtendsNest = (ModelWithStringNest & {
    propExtendsA?: string;
    propExtendsB?: ModelWithStringNest;
});

"
`;

exports[`v3 should generate: ./test/generated/v3/dto/ModelWithArrayNest.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

import type { ModelWithStringNest } from './ModelWithStringNest';

// interface
/**
 * This is a model with one property containing an array
 */
export type ModelWithArrayNest = {
    prop?: Array<ModelWithStringNest>;
    propWithFile?: Array<Blob>;
    propWithNumber?: Array<number>;
};

"
`;

exports[`v3 should generate: ./test/generated/v3/dto/ModelWithBooleanNest.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

// interface
/**
 * This is a model with one boolean property
 */
export type ModelWithBooleanNest = {
    /**
     * This is a simple boolean property
     */
    prop?: boolean;
};

"
`;

exports[`v3 should generate: ./test/generated/v3/dto/ModelWithCircularReferenceNest.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

// interface
/**
 * This is a model with one property containing a circular reference
 */
export type ModelWithCircularReferenceNest = {
    prop?: ModelWithCircularReferenceNest;
};

"
`;

exports[`v3 should generate: ./test/generated/v3/dto/ModelWithDictionaryNest.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

// interface
/**
 * This is a model with one property containing a dictionary
 */
export type ModelWithDictionaryNest = {
    prop?: Record<string, string>;
};

"
`;

exports[`v3 should generate: ./test/generated/v3/dto/ModelWithDuplicateImportsNest.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

import type { ModelWithStringNest } from './ModelWithStringNest';

// interface
/**
 * This is a model with duplicated imports
 */
export type ModelWithDuplicateImportsNest = {
    propA?: ModelWithStringNest;
    propB?: ModelWithStringNest;
    propC?: ModelWithStringNest;
};

"
`;

exports[`v3 should generate: ./test/generated/v3/dto/ModelWithDuplicatePropertiesNest.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

import type { ModelWithStringNest } from './ModelWithStringNest';

// interface
/**
 * This is a model with duplicated properties
 */
export type ModelWithDuplicatePropertiesNest = {
    prop?: ModelWithStringNest;
};

"
`;

exports[`v3 should generate: ./test/generated/v3/dto/ModelWithEnumFromDescriptionNest.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

// interface
/**
 * This is a model with one enum
 */
export type ModelWithEnumFromDescriptionNest = {
    /**
     * Success=1,Warning=2,Error=3
     */
    test?: number;
};

"
`;

exports[`v3 should generate: ./test/generated/v3/dto/ModelWithEnumNest.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

// interface
/**
 * This is a model with one enum
 */
export type ModelWithEnumNest = {
    /**
     * This is a simple enum with strings
     */
    test?: ModelWithEnumNest.test;
    /**
     * These are the HTTP error code enums
     */
    statusCode?: ModelWithEnumNest.statusCode;
    /**
     * Simple boolean enum
     */
    bool?: boolean;
};

export namespace ModelWithEnumNest {

    /**
     * This is a simple enum with strings
     */
    export enum test {
        SUCCESS = 'Success',
        WARNING = 'Warning',
        ERROR = 'Error',
    }

    /**
     * These are the HTTP error code enums
     */
    export enum statusCode {
        _100 = '100',
        _200_FOO = '200 FOO',
        _300_FOO_BAR = '300 FOO_BAR',
        _400_FOO_BAR = '400 foo-bar',
        _500_FOO_BAR = '500 foo.bar',
        _600_FOO_BAR = '600 foo&bar',
    }


}

"
`;

exports[`v3 should generate: ./test/generated/v3/dto/ModelWithIntegerNest.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

// interface
/**
 * This is a model with one number property
 */
export type ModelWithIntegerNest = {
    /**
     * This is a simple number property
     */
    prop?: number;
};

"
`;

exports[`v3 should generate: ./test/generated/v3/dto/ModelWithNestedEnumsNest.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

// interface
/**
 * This is a model with nested enums
 */
export type ModelWithNestedEnumsNest = {
    dictionaryWithEnum?: Record<string, 'Success' | 'Warning' | 'Error'>;
    dictionaryWithEnumFromDescription?: Record<string, number>;
    arrayWithEnum?: Array<'Success' | 'Warning' | 'Error'>;
    arrayWithDescription?: Array<number>;
};

"
`;

exports[`v3 should generate: ./test/generated/v3/dto/ModelWithNestedPropertiesNest.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

// interface
/**
 * This is a model with one nested property
 */
export type ModelWithNestedPropertiesNest = {
    readonly first: {
        readonly second: {
            readonly third: string | null;
        } | null;
    } | null;
};

"
`;

exports[`v3 should generate: ./test/generated/v3/dto/ModelWithNullableStringNest.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

// interface
/**
 * This is a model with one string property
 */
export type ModelWithNullableStringNest = {
    /**
     * This is a simple string property
     */
    nullableProp1?: string | null;
    /**
     * This is a simple string property
     */
    nullableRequiredProp1: string | null;
    /**
     * This is a simple string property
     */
    nullableProp2?: string | null;
    /**
     * This is a simple string property
     */
    nullableRequiredProp2: string | null;
};

"
`;

exports[`v3 should generate: ./test/generated/v3/dto/ModelWithOrderedPropertiesNest.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

// interface
/**
 * This is a model with ordered properties
 */
export type ModelWithOrderedPropertiesNest = {
    zebra?: string;
    apple?: string;
    hawaii?: string;
};

"
`;

exports[`v3 should generate: ./test/generated/v3/dto/ModelWithPatternNest.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

// interface
/**
 * This is a model that contains a some patterns
 */
export type ModelWithPatternNest = {
    key: string;
    name: string;
    readonly enabled?: boolean;
    readonly modified?: string;
    id?: string;
    text?: string;
};

"
`;

exports[`v3 should generate: ./test/generated/v3/dto/ModelWithPropertiesNest.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

import type { ModelWithStringNest } from './ModelWithStringNest';

// interface
/**
 * This is a model with one nested property
 */
export type ModelWithPropertiesNest = {
    required: string;
    readonly requiredAndReadOnly: string;
    requiredAndNullable: string | null;
    string?: string;
    number?: number;
    boolean?: boolean;
    reference?: ModelWithStringNest;
    'property with space'?: string;
    default?: string;
    try?: string;
    readonly '@namespace.string'?: string;
    readonly '@namespace.integer'?: number;
};

"
`;

exports[`v3 should generate: ./test/generated/v3/dto/ModelWithReferenceNest.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

import type { ModelWithPropertiesNest } from './ModelWithPropertiesNest';

// interface
/**
 * This is a model with one property containing a reference
 */
export type ModelWithReferenceNest = {
    prop?: ModelWithPropertiesNest;
};

"
`;

exports[`v3 should generate: ./test/generated/v3/dto/ModelWithStringNest.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

// interface
/**
 * This is a model with one string property
 */
export type ModelWithStringNest = {
    /**
     * This is a simple string property
     */
    prop?: string;
};

"
`;

exports[`v3 should generate: ./test/generated/v3/dto/MongoObjectIdNest.ts 1`] = `
"
          import { Types } from 'mongoose'
          export type MongoObjectIdNest = Types.ObjectId;
          "
`;

exports[`v3 should generate: ./test/generated/v3/dto/PageableNest.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

// interface
export type PageableNest = {
    page?: number;
    size?: number;
    sort?: Array<string>;
};

"
`;

exports[`v3 should generate: ./test/generated/v3/dto/SimpleBooleanNest.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

// ELSE EXPORT TYPE
/**
 * This is a simple boolean
 */
export type SimpleBooleanNest = boolean;
"
`;

exports[`v3 should generate: ./test/generated/v3/dto/SimpleFileNest.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

// ELSE EXPORT TYPE
/**
 * This is a simple file
 */
export type SimpleFileNest = Blob;
"
`;

exports[`v3 should generate: ./test/generated/v3/dto/SimpleIntegerNest.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

// ELSE EXPORT TYPE
/**
 * This is a simple number
 */
export type SimpleIntegerNest = number;
"
`;

exports[`v3 should generate: ./test/generated/v3/dto/SimpleReferenceNest.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

import type { ModelWithStringNest } from './ModelWithStringNest';

// ELSE EXPORT TYPE
/**
 * This is a simple reference
 */
export type SimpleReferenceNest = ModelWithStringNest;
"
`;

exports[`v3 should generate: ./test/generated/v3/dto/SimpleStringNest.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

// ELSE EXPORT TYPE
/**
 * This is a simple string
 */
export type SimpleStringNest = string;
"
`;

exports[`v3 should generate: ./test/generated/v3/dto/SimpleStringWithPatternNest.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

// ELSE EXPORT TYPE
/**
 * This is a simple string
 */
export type SimpleStringWithPatternNest = string | null;
"
`;

exports[`v3 should generate: ./test/generated/v3/index.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export { ApiError } from './core/ApiError';
export { CancelablePromise, CancelError } from './core/CancelablePromise';
export { OpenAPI } from './core/OpenAPI';
export type { OpenAPIConfig } from './core/OpenAPI';

export type { ArrayWithArray } from './models/ArrayWithArray';
export type { ArrayWithBooleans } from './models/ArrayWithBooleans';
export type { ArrayWithNumbers } from './models/ArrayWithNumbers';
export type { ArrayWithProperties } from './models/ArrayWithProperties';
export type { ArrayWithReferences } from './models/ArrayWithReferences';
export type { ArrayWithStrings } from './models/ArrayWithStrings';
export type { CommentWithBackticks } from './models/CommentWithBackticks';
export type { CommentWithBreaks } from './models/CommentWithBreaks';
export type { CommentWithExpressionPlaceholders } from './models/CommentWithExpressionPlaceholders';
export type { CommentWithQuotes } from './models/CommentWithQuotes';
export type { CommentWithReservedCharacters } from './models/CommentWithReservedCharacters';
export type { CommentWithSlashes } from './models/CommentWithSlashes';
export type { CompositionBaseModel } from './models/CompositionBaseModel';
export type { CompositionExtendedModel } from './models/CompositionExtendedModel';
export type { CompositionWithAllOfAndNullable } from './models/CompositionWithAllOfAndNullable';
export type { CompositionWithAnyOf } from './models/CompositionWithAnyOf';
export type { CompositionWithAnyOfAndNullable } from './models/CompositionWithAnyOfAndNullable';
export type { CompositionWithAnyOfAnonymous } from './models/CompositionWithAnyOfAnonymous';
export type { CompositionWithOneOf } from './models/CompositionWithOneOf';
export type { CompositionWithOneOfAndComplexArrayDictionary } from './models/CompositionWithOneOfAndComplexArrayDictionary';
export type { CompositionWithOneOfAndNullable } from './models/CompositionWithOneOfAndNullable';
export type { CompositionWithOneOfAndSimpleArrayDictionary } from './models/CompositionWithOneOfAndSimpleArrayDictionary';
export type { CompositionWithOneOfAndSimpleDictionary } from './models/CompositionWithOneOfAndSimpleDictionary';
export type { CompositionWithOneOfAnonymous } from './models/CompositionWithOneOfAnonymous';
export type { CompositionWithOneOfDiscriminator } from './models/CompositionWithOneOfDiscriminator';
export type { CustomPredefinedNestFields } from './models/CustomPredefinedNestFields';
export type { DateISO } from './models/DateISO';
export type { DeprecatedModel } from './models/DeprecatedModel';
export type { DictionaryWithArray } from './models/DictionaryWithArray';
export type { DictionaryWithDictionary } from './models/DictionaryWithDictionary';
export type { DictionaryWithProperties } from './models/DictionaryWithProperties';
export type { DictionaryWithReference } from './models/DictionaryWithReference';
export type { DictionaryWithString } from './models/DictionaryWithString';
export type { EnumFromDescription } from './models/EnumFromDescription';
export { EnumViaOneOfNumeric, descrEnumViaOneOfNumeric } from './models/EnumViaOneOfNumeric';
export { EnumViaOneOfString, descrEnumViaOneOfString } from './models/EnumViaOneOfString';
export { EnumWithExtensions, descrEnumWithExtensions } from './models/EnumWithExtensions';
export { EnumWithNumbers, descrEnumWithNumbers } from './models/EnumWithNumbers';
export { EnumWithStrings, descrEnumWithStrings } from './models/EnumWithStrings';
export type { File } from './models/File';
export type { ModelCircle } from './models/ModelCircle';
export type { ModelSquare } from './models/ModelSquare';
export type { ModelThatExtends } from './models/ModelThatExtends';
export type { ModelThatExtendsExtends } from './models/ModelThatExtendsExtends';
export type { ModelWithArray } from './models/ModelWithArray';
export type { ModelWithBoolean } from './models/ModelWithBoolean';
export type { ModelWithCircularReference } from './models/ModelWithCircularReference';
export type { ModelWithDictionary } from './models/ModelWithDictionary';
export type { ModelWithDuplicateImports } from './models/ModelWithDuplicateImports';
export type { ModelWithDuplicateProperties } from './models/ModelWithDuplicateProperties';
export { ModelWithEnum } from './models/ModelWithEnum';
export type { ModelWithEnumFromDescription } from './models/ModelWithEnumFromDescription';
export type { ModelWithInteger } from './models/ModelWithInteger';
export type { ModelWithNestedEnums } from './models/ModelWithNestedEnums';
export type { ModelWithNestedProperties } from './models/ModelWithNestedProperties';
export type { ModelWithNullableString } from './models/ModelWithNullableString';
export type { ModelWithOrderedProperties } from './models/ModelWithOrderedProperties';
export type { ModelWithPattern } from './models/ModelWithPattern';
export type { ModelWithProperties } from './models/ModelWithProperties';
export type { ModelWithReference } from './models/ModelWithReference';
export type { ModelWithString } from './models/ModelWithString';
export type { MongoObjectId } from './models/MongoObjectId';
export type { Pageable } from './models/Pageable';
export type { SimpleBoolean } from './models/SimpleBoolean';
export type { SimpleFile } from './models/SimpleFile';
export type { SimpleInteger } from './models/SimpleInteger';
export type { SimpleReference } from './models/SimpleReference';
export type { SimpleString } from './models/SimpleString';
export type { SimpleStringWithPattern } from './models/SimpleStringWithPattern';

// Nest Dto for Implements
export type { ArrayWithArrayNest } from './dto/ArrayWithArrayNest';
export type { ArrayWithBooleansNest } from './dto/ArrayWithBooleansNest';
export type { ArrayWithNumbersNest } from './dto/ArrayWithNumbersNest';
export type { ArrayWithPropertiesNest } from './dto/ArrayWithPropertiesNest';
export type { ArrayWithReferencesNest } from './dto/ArrayWithReferencesNest';
export type { ArrayWithStringsNest } from './dto/ArrayWithStringsNest';
export type { CommentWithBackticksNest } from './dto/CommentWithBackticksNest';
export type { CommentWithBreaksNest } from './dto/CommentWithBreaksNest';
export type { CommentWithExpressionPlaceholdersNest } from './dto/CommentWithExpressionPlaceholdersNest';
export type { CommentWithQuotesNest } from './dto/CommentWithQuotesNest';
export type { CommentWithReservedCharactersNest } from './dto/CommentWithReservedCharactersNest';
export type { CommentWithSlashesNest } from './dto/CommentWithSlashesNest';
export type { CompositionBaseModelNest } from './dto/CompositionBaseModelNest';
export type { CompositionExtendedModelNest } from './dto/CompositionExtendedModelNest';
export type { CompositionWithAllOfAndNullableNest } from './dto/CompositionWithAllOfAndNullableNest';
export type { CompositionWithAnyOfNest } from './dto/CompositionWithAnyOfNest';
export type { CompositionWithAnyOfAndNullableNest } from './dto/CompositionWithAnyOfAndNullableNest';
export type { CompositionWithAnyOfAnonymousNest } from './dto/CompositionWithAnyOfAnonymousNest';
export type { CompositionWithOneOfNest } from './dto/CompositionWithOneOfNest';
export type { CompositionWithOneOfAndComplexArrayDictionaryNest } from './dto/CompositionWithOneOfAndComplexArrayDictionaryNest';
export type { CompositionWithOneOfAndNullableNest } from './dto/CompositionWithOneOfAndNullableNest';
export type { CompositionWithOneOfAndSimpleArrayDictionaryNest } from './dto/CompositionWithOneOfAndSimpleArrayDictionaryNest';
export type { CompositionWithOneOfAndSimpleDictionaryNest } from './dto/CompositionWithOneOfAndSimpleDictionaryNest';
export type { CompositionWithOneOfAnonymousNest } from './dto/CompositionWithOneOfAnonymousNest';
export type { CompositionWithOneOfDiscriminatorNest } from './dto/CompositionWithOneOfDiscriminatorNest';
export type { CustomPredefinedNestFieldsNest } from './dto/CustomPredefinedNestFieldsNest';
export type { DateISONest } from './dto/DateISONest';
export type { DeprecatedModelNest } from './dto/DeprecatedModelNest';
export type { DictionaryWithArrayNest } from './dto/DictionaryWithArrayNest';
export type { DictionaryWithDictionaryNest } from './dto/DictionaryWithDictionaryNest';
export type { DictionaryWithPropertiesNest } from './dto/DictionaryWithPropertiesNest';
export type { DictionaryWithReferenceNest } from './dto/DictionaryWithReferenceNest';
export type { DictionaryWithStringNest } from './dto/DictionaryWithStringNest';
export type { EnumFromDescriptionNest } from './dto/EnumFromDescriptionNest';
export type { FileNest } from './dto/FileNest';
export type { ModelCircleNest } from './dto/ModelCircleNest';
export type { ModelSquareNest } from './dto/ModelSquareNest';
export type { ModelThatExtendsNest } from './dto/ModelThatExtendsNest';
export type { ModelThatExtendsExtendsNest } from './dto/ModelThatExtendsExtendsNest';
export type { ModelWithArrayNest } from './dto/ModelWithArrayNest';
export type { ModelWithBooleanNest } from './dto/ModelWithBooleanNest';
export type { ModelWithCircularReferenceNest } from './dto/ModelWithCircularReferenceNest';
export type { ModelWithDictionaryNest } from './dto/ModelWithDictionaryNest';
export type { ModelWithDuplicateImportsNest } from './dto/ModelWithDuplicateImportsNest';
export type { ModelWithDuplicatePropertiesNest } from './dto/ModelWithDuplicatePropertiesNest';
export { ModelWithEnumNest } from './dto/ModelWithEnumNest';
export type { ModelWithEnumFromDescriptionNest } from './dto/ModelWithEnumFromDescriptionNest';
export type { ModelWithIntegerNest } from './dto/ModelWithIntegerNest';
export type { ModelWithNestedEnumsNest } from './dto/ModelWithNestedEnumsNest';
export type { ModelWithNestedPropertiesNest } from './dto/ModelWithNestedPropertiesNest';
export type { ModelWithNullableStringNest } from './dto/ModelWithNullableStringNest';
export type { ModelWithOrderedPropertiesNest } from './dto/ModelWithOrderedPropertiesNest';
export type { ModelWithPatternNest } from './dto/ModelWithPatternNest';
export type { ModelWithPropertiesNest } from './dto/ModelWithPropertiesNest';
export type { ModelWithReferenceNest } from './dto/ModelWithReferenceNest';
export type { ModelWithStringNest } from './dto/ModelWithStringNest';
export type { MongoObjectIdNest } from './dto/MongoObjectIdNest';
export type { PageableNest } from './dto/PageableNest';
export type { SimpleBooleanNest } from './dto/SimpleBooleanNest';
export type { SimpleFileNest } from './dto/SimpleFileNest';
export type { SimpleIntegerNest } from './dto/SimpleIntegerNest';
export type { SimpleReferenceNest } from './dto/SimpleReferenceNest';
export type { SimpleStringNest } from './dto/SimpleStringNest';
export type { SimpleStringWithPatternNest } from './dto/SimpleStringWithPatternNest';


export { $ArrayWithArray } from './schemas/$ArrayWithArray';
export { $ArrayWithBooleans } from './schemas/$ArrayWithBooleans';
export { $ArrayWithNumbers } from './schemas/$ArrayWithNumbers';
export { $ArrayWithProperties } from './schemas/$ArrayWithProperties';
export { $ArrayWithReferences } from './schemas/$ArrayWithReferences';
export { $ArrayWithStrings } from './schemas/$ArrayWithStrings';
export { $CommentWithBackticks } from './schemas/$CommentWithBackticks';
export { $CommentWithBreaks } from './schemas/$CommentWithBreaks';
export { $CommentWithExpressionPlaceholders } from './schemas/$CommentWithExpressionPlaceholders';
export { $CommentWithQuotes } from './schemas/$CommentWithQuotes';
export { $CommentWithReservedCharacters } from './schemas/$CommentWithReservedCharacters';
export { $CommentWithSlashes } from './schemas/$CommentWithSlashes';
export { $CompositionBaseModel } from './schemas/$CompositionBaseModel';
export { $CompositionExtendedModel } from './schemas/$CompositionExtendedModel';
export { $CompositionWithAllOfAndNullable } from './schemas/$CompositionWithAllOfAndNullable';
export { $CompositionWithAnyOf } from './schemas/$CompositionWithAnyOf';
export { $CompositionWithAnyOfAndNullable } from './schemas/$CompositionWithAnyOfAndNullable';
export { $CompositionWithAnyOfAnonymous } from './schemas/$CompositionWithAnyOfAnonymous';
export { $CompositionWithOneOf } from './schemas/$CompositionWithOneOf';
export { $CompositionWithOneOfAndComplexArrayDictionary } from './schemas/$CompositionWithOneOfAndComplexArrayDictionary';
export { $CompositionWithOneOfAndNullable } from './schemas/$CompositionWithOneOfAndNullable';
export { $CompositionWithOneOfAndSimpleArrayDictionary } from './schemas/$CompositionWithOneOfAndSimpleArrayDictionary';
export { $CompositionWithOneOfAndSimpleDictionary } from './schemas/$CompositionWithOneOfAndSimpleDictionary';
export { $CompositionWithOneOfAnonymous } from './schemas/$CompositionWithOneOfAnonymous';
export { $CompositionWithOneOfDiscriminator } from './schemas/$CompositionWithOneOfDiscriminator';
export { $CustomPredefinedNestFields } from './schemas/$CustomPredefinedNestFields';
export { $DateISO } from './schemas/$DateISO';
export { $DeprecatedModel } from './schemas/$DeprecatedModel';
export { $DictionaryWithArray } from './schemas/$DictionaryWithArray';
export { $DictionaryWithDictionary } from './schemas/$DictionaryWithDictionary';
export { $DictionaryWithProperties } from './schemas/$DictionaryWithProperties';
export { $DictionaryWithReference } from './schemas/$DictionaryWithReference';
export { $DictionaryWithString } from './schemas/$DictionaryWithString';
export { $EnumFromDescription } from './schemas/$EnumFromDescription';
export { $EnumViaOneOfNumeric } from './schemas/$EnumViaOneOfNumeric';
export { $EnumViaOneOfString } from './schemas/$EnumViaOneOfString';
export { $EnumWithExtensions } from './schemas/$EnumWithExtensions';
export { $EnumWithNumbers } from './schemas/$EnumWithNumbers';
export { $EnumWithStrings } from './schemas/$EnumWithStrings';
export { $File } from './schemas/$File';
export { $ModelCircle } from './schemas/$ModelCircle';
export { $ModelSquare } from './schemas/$ModelSquare';
export { $ModelThatExtends } from './schemas/$ModelThatExtends';
export { $ModelThatExtendsExtends } from './schemas/$ModelThatExtendsExtends';
export { $ModelWithArray } from './schemas/$ModelWithArray';
export { $ModelWithBoolean } from './schemas/$ModelWithBoolean';
export { $ModelWithCircularReference } from './schemas/$ModelWithCircularReference';
export { $ModelWithDictionary } from './schemas/$ModelWithDictionary';
export { $ModelWithDuplicateImports } from './schemas/$ModelWithDuplicateImports';
export { $ModelWithDuplicateProperties } from './schemas/$ModelWithDuplicateProperties';
export { $ModelWithEnum } from './schemas/$ModelWithEnum';
export { $ModelWithEnumFromDescription } from './schemas/$ModelWithEnumFromDescription';
export { $ModelWithInteger } from './schemas/$ModelWithInteger';
export { $ModelWithNestedEnums } from './schemas/$ModelWithNestedEnums';
export { $ModelWithNestedProperties } from './schemas/$ModelWithNestedProperties';
export { $ModelWithNullableString } from './schemas/$ModelWithNullableString';
export { $ModelWithOrderedProperties } from './schemas/$ModelWithOrderedProperties';
export { $ModelWithPattern } from './schemas/$ModelWithPattern';
export { $ModelWithProperties } from './schemas/$ModelWithProperties';
export { $ModelWithReference } from './schemas/$ModelWithReference';
export { $ModelWithString } from './schemas/$ModelWithString';
export { $MongoObjectId } from './schemas/$MongoObjectId';
export { $Pageable } from './schemas/$Pageable';
export { $SimpleBoolean } from './schemas/$SimpleBoolean';
export { $SimpleFile } from './schemas/$SimpleFile';
export { $SimpleInteger } from './schemas/$SimpleInteger';
export { $SimpleReference } from './schemas/$SimpleReference';
export { $SimpleString } from './schemas/$SimpleString';
export { $SimpleStringWithPattern } from './schemas/$SimpleStringWithPattern';

export { CollectionFormatService } from './services/CollectionFormatService';
export { ComplexService } from './services/ComplexService';
export { DefaultService } from './services/DefaultService';
export { DefaultsService } from './services/DefaultsService';
export { DeprecatedService } from './services/DeprecatedService';
export { DescriptionsService } from './services/DescriptionsService';
export { DuplicateService } from './services/DuplicateService';
export { ErrorService } from './services/ErrorService';
export { FormDataService } from './services/FormDataService';
export { HeaderService } from './services/HeaderService';
export { MultipartService } from './services/MultipartService';
export { MultipleTags1Service } from './services/MultipleTags1Service';
export { MultipleTags2Service } from './services/MultipleTags2Service';
export { MultipleTags3Service } from './services/MultipleTags3Service';
export { NoContentService } from './services/NoContentService';
export { ParametersService } from './services/ParametersService';
export { RequestBodyService } from './services/RequestBodyService';
export { ResponseService } from './services/ResponseService';
export { SimpleService } from './services/SimpleService';
export { TypesService } from './services/TypesService';
export { UploadService } from './services/UploadService';
"
`;

exports[`v3 should generate: ./test/generated/v3/models/ArrayWithArray.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

import type { ModelWithString } from './ModelWithString';

/**
 * This is a simple array containing an array
 */
export type ArrayWithArray = Array<Array<ModelWithString>>;
"
`;

exports[`v3 should generate: ./test/generated/v3/models/ArrayWithBooleans.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a simple array with booleans
 */
export type ArrayWithBooleans = Array<boolean>;
"
`;

exports[`v3 should generate: ./test/generated/v3/models/ArrayWithNumbers.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a simple array with numbers
 */
export type ArrayWithNumbers = Array<number>;
"
`;

exports[`v3 should generate: ./test/generated/v3/models/ArrayWithProperties.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a simple array with properties
 */
export type ArrayWithProperties = Array<{
    foo?: string;
    bar?: string;
}>;
"
`;

exports[`v3 should generate: ./test/generated/v3/models/ArrayWithReferences.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

import type { ModelWithString } from './ModelWithString';

/**
 * This is a simple array with references
 */
export type ArrayWithReferences = Array<ModelWithString>;
"
`;

exports[`v3 should generate: ./test/generated/v3/models/ArrayWithStrings.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a simple array with strings
 */
export type ArrayWithStrings = Array<string>;
"
`;

exports[`v3 should generate: ./test/generated/v3/models/CommentWithBackticks.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * Testing backticks in string: \`backticks\` and \`\`\`multiple backticks\`\`\` should work
 */
export type CommentWithBackticks = number;
"
`;

exports[`v3 should generate: ./test/generated/v3/models/CommentWithBreaks.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * Testing multiline comments in string: First line
 * Second line
 *
 * Fourth line
 */
export type CommentWithBreaks = number;
"
`;

exports[`v3 should generate: ./test/generated/v3/models/CommentWithExpressionPlaceholders.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * Testing expression placeholders in string: \${expression} should work
 */
export type CommentWithExpressionPlaceholders = number;
"
`;

exports[`v3 should generate: ./test/generated/v3/models/CommentWithQuotes.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * Testing quotes in string: 'single quote''' and \\"double quotes\\"\\"\\" should work
 */
export type CommentWithQuotes = number;
"
`;

exports[`v3 should generate: ./test/generated/v3/models/CommentWithReservedCharacters.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * Testing reserved characters in string: * inline * and ** inline ** should work
 */
export type CommentWithReservedCharacters = number;
"
`;

exports[`v3 should generate: ./test/generated/v3/models/CommentWithSlashes.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * Testing slashes in string: \\\\backwards\\\\\\\\\\\\ and /forwards/// should work
 */
export type CommentWithSlashes = number;
"
`;

exports[`v3 should generate: ./test/generated/v3/models/CompositionBaseModel.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a base model with two simple optional properties
 */
export type CompositionBaseModel = {
    firstName?: string;
    lastname?: string;
};

"
`;

exports[`v3 should generate: ./test/generated/v3/models/CompositionExtendedModel.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

import type { CompositionBaseModel } from './CompositionBaseModel';

/**
 * This is a model that extends the base model
 */
export type CompositionExtendedModel = (CompositionBaseModel & {
    firstName: string;
    lastname: string;
    age: number;
});

"
`;

exports[`v3 should generate: ./test/generated/v3/models/CompositionWithAllOfAndNullable.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

import type { ModelWithArray } from './ModelWithArray';
import type { ModelWithDictionary } from './ModelWithDictionary';
import type { ModelWithEnum } from './ModelWithEnum';

/**
 * This is a model with one property with a 'all of' relationship
 */
export type CompositionWithAllOfAndNullable = {
    propA?: ({
        boolean?: boolean;
    } & ModelWithEnum & ModelWithArray & ModelWithDictionary) | null;
};

"
`;

exports[`v3 should generate: ./test/generated/v3/models/CompositionWithAnyOf.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

import type { ModelWithArray } from './ModelWithArray';
import type { ModelWithDictionary } from './ModelWithDictionary';
import type { ModelWithEnum } from './ModelWithEnum';
import type { ModelWithString } from './ModelWithString';

/**
 * This is a model with one property with a 'any of' relationship
 */
export type CompositionWithAnyOf = {
    propA?: (ModelWithString | ModelWithEnum | ModelWithArray | ModelWithDictionary);
};

"
`;

exports[`v3 should generate: ./test/generated/v3/models/CompositionWithAnyOfAndNullable.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

import type { ModelWithArray } from './ModelWithArray';
import type { ModelWithDictionary } from './ModelWithDictionary';
import type { ModelWithEnum } from './ModelWithEnum';

/**
 * This is a model with one property with a 'any of' relationship
 */
export type CompositionWithAnyOfAndNullable = {
    propA?: ({
        boolean?: boolean;
    } | ModelWithEnum | ModelWithArray | ModelWithDictionary) | null;
};

"
`;

exports[`v3 should generate: ./test/generated/v3/models/CompositionWithAnyOfAnonymous.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a model with one property with a 'any of' relationship where the options are not $ref
 */
export type CompositionWithAnyOfAnonymous = {
    propA?: ({
        propA?: string;
    } | string | number);
};

"
`;

exports[`v3 should generate: ./test/generated/v3/models/CompositionWithOneOf.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

import type { ModelWithArray } from './ModelWithArray';
import type { ModelWithDictionary } from './ModelWithDictionary';
import type { ModelWithEnum } from './ModelWithEnum';
import type { ModelWithString } from './ModelWithString';

/**
 * This is a model with one property with a 'one of' relationship
 */
export type CompositionWithOneOf = {
    propA?: (ModelWithString | ModelWithEnum | ModelWithArray | ModelWithDictionary);
};

"
`;

exports[`v3 should generate: ./test/generated/v3/models/CompositionWithOneOfAndComplexArrayDictionary.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a model that contains a dictionary of complex arrays (composited) within composition
 */
export type CompositionWithOneOfAndComplexArrayDictionary = {
    propA?: (boolean | Record<string, Array<(number | string)>>);
};

"
`;

exports[`v3 should generate: ./test/generated/v3/models/CompositionWithOneOfAndNullable.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

import type { ModelWithArray } from './ModelWithArray';
import type { ModelWithDictionary } from './ModelWithDictionary';
import type { ModelWithEnum } from './ModelWithEnum';

/**
 * This is a model with one property with a 'one of' relationship
 */
export type CompositionWithOneOfAndNullable = {
    propA?: ({
        boolean?: boolean;
    } | ModelWithEnum | ModelWithArray | ModelWithDictionary) | null;
};

"
`;

exports[`v3 should generate: ./test/generated/v3/models/CompositionWithOneOfAndSimpleArrayDictionary.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a model that contains a dictionary of simple arrays within composition
 */
export type CompositionWithOneOfAndSimpleArrayDictionary = {
    propA?: (boolean | Record<string, Array<boolean>>);
};

"
`;

exports[`v3 should generate: ./test/generated/v3/models/CompositionWithOneOfAndSimpleDictionary.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a model that contains a simple dictionary within composition
 */
export type CompositionWithOneOfAndSimpleDictionary = {
    propA?: (boolean | Record<string, number>);
};

"
`;

exports[`v3 should generate: ./test/generated/v3/models/CompositionWithOneOfAnonymous.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a model with one property with a 'one of' relationship where the options are not $ref
 */
export type CompositionWithOneOfAnonymous = {
    propA?: ({
        propA?: string;
    } | string | number);
};

"
`;

exports[`v3 should generate: ./test/generated/v3/models/CompositionWithOneOfDiscriminator.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

import type { ModelCircle } from './ModelCircle';
import type { ModelSquare } from './ModelSquare';

/**
 * This is a model with one property with a 'one of' relationship where the options are not $ref
 */
export type CompositionWithOneOfDiscriminator = (ModelCircle | ModelSquare);

"
`;

exports[`v3 should generate: ./test/generated/v3/models/CustomPredefinedNestFields.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

import type { DateISO } from './DateISO';
import type { MongoObjectId } from './MongoObjectId';

/**
 * This is a simple reference
 */
export type CustomPredefinedNestFields = {
    id?: MongoObjectId;
    date?: DateISO;
};

"
`;

exports[`v3 should generate: ./test/generated/v3/models/DateISO.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * Date ISO
 */
export type DateISO = string;
"
`;

exports[`v3 should generate: ./test/generated/v3/models/DeprecatedModel.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a deprecated model with a deprecated property
 * @deprecated
 */
export type DeprecatedModel = {
    /**
     * This is a deprecated property
     * @deprecated
     */
    prop?: string;
};

"
`;

exports[`v3 should generate: ./test/generated/v3/models/DictionaryWithArray.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

import type { ModelWithString } from './ModelWithString';

/**
 * This is a complex dictionary
 */
export type DictionaryWithArray = Record<string, Array<ModelWithString>>;
"
`;

exports[`v3 should generate: ./test/generated/v3/models/DictionaryWithDictionary.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a string dictionary
 */
export type DictionaryWithDictionary = Record<string, Record<string, string>>;
"
`;

exports[`v3 should generate: ./test/generated/v3/models/DictionaryWithProperties.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a complex dictionary
 */
export type DictionaryWithProperties = Record<string, {
    foo?: string;
    bar?: string;
}>;
"
`;

exports[`v3 should generate: ./test/generated/v3/models/DictionaryWithReference.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

import type { ModelWithString } from './ModelWithString';

/**
 * This is a string reference
 */
export type DictionaryWithReference = Record<string, ModelWithString>;
"
`;

exports[`v3 should generate: ./test/generated/v3/models/DictionaryWithString.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a string dictionary
 */
export type DictionaryWithString = Record<string, string>;
"
`;

exports[`v3 should generate: ./test/generated/v3/models/EnumFromDescription.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * Success=1,Warning=2,Error=3
 */
export type EnumFromDescription = number;
"
`;

exports[`v3 should generate: ./test/generated/v3/models/EnumViaOneOfNumeric.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * OpenApi 3.1 style numeric enum
 */
export enum EnumViaOneOfNumeric {
    /**
     * Success
     */
    SUCCESS = 0,
    /**
     * Warning
     */
    WARNING = 1,
    /**
     * Error
     */
    ERROR = 3,
}

/**
 * Возвращает описание для элемента enum
 * OpenApi 3.1 style numeric enum
 * @param {EnumViaOneOfNumeric} val Значение из EnumViaOneOfNumeric
 * @return {string} описание для значения
 */
export const descrEnumViaOneOfNumeric = (val: EnumViaOneOfNumeric):string => {
    switch (val) {
        case 0:
        return 'Success'
        case 1:
        return 'Warning'
        case 3:
        return 'Error'
        default:
        return ''
    }
}
"
`;

exports[`v3 should generate: ./test/generated/v3/models/EnumViaOneOfString.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * OpenApi 3.1 style titled enum
 */
export enum EnumViaOneOfString {
    /**
     * Success
     */
    SUCCESS = 'SUCCESS',
    /**
     * Warning
     */
    SUCCESS_NOT = 'SUCCESS_NOT',
    /**
     * Error
     */
    ERROR = 'ERROR',
}

/**
 * Возвращает описание для элемента enum
 * OpenApi 3.1 style titled enum
 * @param {EnumViaOneOfString} val Значение из EnumViaOneOfString
 * @return {string} описание для значения
 */
export const descrEnumViaOneOfString = (val: EnumViaOneOfString):string => {
    switch (val) {
        case 'SUCCESS':
        return 'Success'
        case 'SUCCESS_NOT':
        return 'Warning'
        case 'ERROR':
        return 'Error'
        default:
        return ''
    }
}
"
`;

exports[`v3 should generate: ./test/generated/v3/models/EnumWithExtensions.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a simple enum with numbers
 */
export enum EnumWithExtensions {
    /**
     * Used when the status of something is successful
     */
    CUSTOM_SUCCESS = 200,
    /**
     * Used when the status of something has a warning
     */
    CUSTOM_WARNING = 400,
    /**
     * Used when the status of something has an error
     */
    CUSTOM_ERROR = 500,
}

/**
 * Возвращает описание для элемента enum
 * This is a simple enum with numbers
 * @param {EnumWithExtensions} val Значение из EnumWithExtensions
 * @return {string} описание для значения
 */
export const descrEnumWithExtensions = (val: EnumWithExtensions):string => {
    switch (val) {
        case 200:
        return 'Used when the status of something is successful'
        case 400:
        return 'Used when the status of something has a warning'
        case 500:
        return 'Used when the status of something has an error'
        default:
        return ''
    }
}
"
`;

exports[`v3 should generate: ./test/generated/v3/models/EnumWithNumbers.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a simple enum with numbers
 */
export enum EnumWithNumbers {
    '_0' = 0,
    '_1' = 1,
    '_2' = 2,
    '_3' = 3,
    '_1.1' = 1.1,
    '_1.2' = 1.2,
    '_1.3' = 1.3,
    '_100' = 100,
    '_200' = 200,
    '_300' = 300,
    '_-100' = -100,
    '_-200' = -200,
    '_-300' = -300,
    '_-1.1' = -1.1,
    '_-1.2' = -1.2,
    '_-1.3' = -1.3,
}

/**
 * Возвращает описание для элемента enum
 * This is a simple enum with numbers
 * @param {EnumWithNumbers} val Значение из EnumWithNumbers
 * @return {string} описание для значения
 */
export const descrEnumWithNumbers = (val: EnumWithNumbers):string => {
    switch (val) {
        default:
        return ''
    }
}
"
`;

exports[`v3 should generate: ./test/generated/v3/models/EnumWithStrings.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a simple enum with strings
 */
export enum EnumWithStrings {
    SUCCESS = 'Success',
    WARNING = 'Warning',
    ERROR = 'Error',
    _SINGLE_QUOTE_ = '\\\\'Single Quote\\\\'',
    _DOUBLE_QUOTES_ = '\\"Double Quotes\\"',
}

/**
 * Возвращает описание для элемента enum
 * This is a simple enum with strings
 * @param {EnumWithStrings} val Значение из EnumWithStrings
 * @return {string} описание для значения
 */
export const descrEnumWithStrings = (val: EnumWithStrings):string => {
    switch (val) {
        default:
        return ''
    }
}
"
`;

exports[`v3 should generate: ./test/generated/v3/models/File.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

export type File = {
    readonly id?: string;
    readonly updated_at?: string;
    readonly created_at?: string;
    mime: string;
    readonly file?: string;
};

"
`;

exports[`v3 should generate: ./test/generated/v3/models/ModelCircle.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * Circle
 */
export type ModelCircle = {
    kind: 'circle';
    radius?: number;
};

"
`;

exports[`v3 should generate: ./test/generated/v3/models/ModelSquare.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * Square
 */
export type ModelSquare = {
    kind: 'square';
    sideLength?: number;
};

"
`;

exports[`v3 should generate: ./test/generated/v3/models/ModelThatExtends.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

import type { ModelWithString } from './ModelWithString';

/**
 * This is a model that extends another model
 */
export type ModelThatExtends = (ModelWithString & {
    propExtendsA?: string;
    propExtendsB?: ModelWithString;
});

"
`;

exports[`v3 should generate: ./test/generated/v3/models/ModelThatExtendsExtends.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

import type { ModelThatExtends } from './ModelThatExtends';
import type { ModelWithString } from './ModelWithString';

/**
 * This is a model that extends another model
 */
export type ModelThatExtendsExtends = (ModelWithString & ModelThatExtends & {
    propExtendsC?: string;
    propExtendsD?: ModelWithString;
});

"
`;

exports[`v3 should generate: ./test/generated/v3/models/ModelWithArray.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

import type { ModelWithString } from './ModelWithString';

/**
 * This is a model with one property containing an array
 */
export type ModelWithArray = {
    prop?: Array<ModelWithString>;
    propWithFile?: Array<Blob>;
    propWithNumber?: Array<number>;
};

"
`;

exports[`v3 should generate: ./test/generated/v3/models/ModelWithBoolean.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a model with one boolean property
 */
export type ModelWithBoolean = {
    /**
     * This is a simple boolean property
     */
    prop?: boolean;
};

"
`;

exports[`v3 should generate: ./test/generated/v3/models/ModelWithCircularReference.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a model with one property containing a circular reference
 */
export type ModelWithCircularReference = {
    prop?: ModelWithCircularReference;
};

"
`;

exports[`v3 should generate: ./test/generated/v3/models/ModelWithDictionary.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a model with one property containing a dictionary
 */
export type ModelWithDictionary = {
    prop?: Record<string, string>;
};

"
`;

exports[`v3 should generate: ./test/generated/v3/models/ModelWithDuplicateImports.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

import type { ModelWithString } from './ModelWithString';

/**
 * This is a model with duplicated imports
 */
export type ModelWithDuplicateImports = {
    propA?: ModelWithString;
    propB?: ModelWithString;
    propC?: ModelWithString;
};

"
`;

exports[`v3 should generate: ./test/generated/v3/models/ModelWithDuplicateProperties.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

import type { ModelWithString } from './ModelWithString';

/**
 * This is a model with duplicated properties
 */
export type ModelWithDuplicateProperties = {
    prop?: ModelWithString;
};

"
`;

exports[`v3 should generate: ./test/generated/v3/models/ModelWithEnum.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a model with one enum
 */
export type ModelWithEnum = {
    /**
     * This is a simple enum with strings
     */
    test?: ModelWithEnum.test;
    /**
     * These are the HTTP error code enums
     */
    statusCode?: ModelWithEnum.statusCode;
    /**
     * Simple boolean enum
     */
    bool?: boolean;
};

export namespace ModelWithEnum {

    /**
     * This is a simple enum with strings
     */
    export enum test {
        SUCCESS = 'Success',
        WARNING = 'Warning',
        ERROR = 'Error',
    }

    /**
     * These are the HTTP error code enums
     */
    export enum statusCode {
        _100 = '100',
        _200_FOO = '200 FOO',
        _300_FOO_BAR = '300 FOO_BAR',
        _400_FOO_BAR = '400 foo-bar',
        _500_FOO_BAR = '500 foo.bar',
        _600_FOO_BAR = '600 foo&bar',
    }


}

"
`;

exports[`v3 should generate: ./test/generated/v3/models/ModelWithEnumFromDescription.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a model with one enum
 */
export type ModelWithEnumFromDescription = {
    /**
     * Success=1,Warning=2,Error=3
     */
    test?: number;
};

"
`;

exports[`v3 should generate: ./test/generated/v3/models/ModelWithInteger.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a model with one number property
 */
export type ModelWithInteger = {
    /**
     * This is a simple number property
     */
    prop?: number;
};

"
`;

exports[`v3 should generate: ./test/generated/v3/models/ModelWithNestedEnums.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a model with nested enums
 */
export type ModelWithNestedEnums = {
    dictionaryWithEnum?: Record<string, 'Success' | 'Warning' | 'Error'>;
    dictionaryWithEnumFromDescription?: Record<string, number>;
    arrayWithEnum?: Array<'Success' | 'Warning' | 'Error'>;
    arrayWithDescription?: Array<number>;
};

"
`;

exports[`v3 should generate: ./test/generated/v3/models/ModelWithNestedProperties.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a model with one nested property
 */
export type ModelWithNestedProperties = {
    readonly first: {
        readonly second: {
            readonly third: string | null;
        } | null;
    } | null;
};

"
`;

exports[`v3 should generate: ./test/generated/v3/models/ModelWithNullableString.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a model with one string property
 */
export type ModelWithNullableString = {
    /**
     * This is a simple string property
     */
    nullableProp1?: string | null;
    /**
     * This is a simple string property
     */
    nullableRequiredProp1: string | null;
    /**
     * This is a simple string property
     */
    nullableProp2?: string | null;
    /**
     * This is a simple string property
     */
    nullableRequiredProp2: string | null;
};

"
`;

exports[`v3 should generate: ./test/generated/v3/models/ModelWithOrderedProperties.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a model with ordered properties
 */
export type ModelWithOrderedProperties = {
    zebra?: string;
    apple?: string;
    hawaii?: string;
};

"
`;

exports[`v3 should generate: ./test/generated/v3/models/ModelWithPattern.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a model that contains a some patterns
 */
export type ModelWithPattern = {
    key: string;
    name: string;
    readonly enabled?: boolean;
    readonly modified?: string;
    id?: string;
    text?: string;
};

"
`;

exports[`v3 should generate: ./test/generated/v3/models/ModelWithProperties.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

import type { ModelWithString } from './ModelWithString';

/**
 * This is a model with one nested property
 */
export type ModelWithProperties = {
    required: string;
    readonly requiredAndReadOnly: string;
    requiredAndNullable: string | null;
    string?: string;
    number?: number;
    boolean?: boolean;
    reference?: ModelWithString;
    'property with space'?: string;
    default?: string;
    try?: string;
    readonly '@namespace.string'?: string;
    readonly '@namespace.integer'?: number;
};

"
`;

exports[`v3 should generate: ./test/generated/v3/models/ModelWithReference.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

import type { ModelWithProperties } from './ModelWithProperties';

/**
 * This is a model with one property containing a reference
 */
export type ModelWithReference = {
    prop?: ModelWithProperties;
};

"
`;

exports[`v3 should generate: ./test/generated/v3/models/ModelWithString.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a model with one string property
 */
export type ModelWithString = {
    /**
     * This is a simple string property
     */
    prop?: string;
};

"
`;

exports[`v3 should generate: ./test/generated/v3/models/MongoObjectId.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * Mongo ObjectId
 */
export type MongoObjectId = string;
"
`;

exports[`v3 should generate: ./test/generated/v3/models/Pageable.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

export type Pageable = {
    page?: number;
    size?: number;
    sort?: Array<string>;
};

"
`;

exports[`v3 should generate: ./test/generated/v3/models/SimpleBoolean.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a simple boolean
 */
export type SimpleBoolean = boolean;
"
`;

exports[`v3 should generate: ./test/generated/v3/models/SimpleFile.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a simple file
 */
export type SimpleFile = Blob;
"
`;

exports[`v3 should generate: ./test/generated/v3/models/SimpleInteger.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a simple number
 */
export type SimpleInteger = number;
"
`;

exports[`v3 should generate: ./test/generated/v3/models/SimpleReference.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

import type { ModelWithString } from './ModelWithString';

/**
 * This is a simple reference
 */
export type SimpleReference = ModelWithString;
"
`;

exports[`v3 should generate: ./test/generated/v3/models/SimpleString.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a simple string
 */
export type SimpleString = string;
"
`;

exports[`v3 should generate: ./test/generated/v3/models/SimpleStringWithPattern.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * This is a simple string
 */
export type SimpleStringWithPattern = string | null;
"
`;

exports[`v3 should generate: ./test/generated/v3/schemas/$ArrayWithArray.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ArrayWithArray = {
    type: 'array',
    contains: {
        type: 'array',
        contains: {
            type: 'ModelWithString',
        },
    },
} as const;
"
`;

exports[`v3 should generate: ./test/generated/v3/schemas/$ArrayWithBooleans.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ArrayWithBooleans = {
    type: 'array',
    contains: {
        type: 'boolean',
    },
} as const;
"
`;

exports[`v3 should generate: ./test/generated/v3/schemas/$ArrayWithNumbers.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ArrayWithNumbers = {
    type: 'array',
    contains: {
        type: 'number',
    },
} as const;
"
`;

exports[`v3 should generate: ./test/generated/v3/schemas/$ArrayWithProperties.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ArrayWithProperties = {
    type: 'array',
    contains: {
        properties: {
            foo: {
                type: 'string',
            },
            bar: {
                type: 'string',
            },
        },
    },
} as const;
"
`;

exports[`v3 should generate: ./test/generated/v3/schemas/$ArrayWithReferences.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ArrayWithReferences = {
    type: 'array',
    contains: {
        type: 'ModelWithString',
    },
} as const;
"
`;

exports[`v3 should generate: ./test/generated/v3/schemas/$ArrayWithStrings.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ArrayWithStrings = {
    type: 'array',
    contains: {
        type: 'string',
    },
} as const;
"
`;

exports[`v3 should generate: ./test/generated/v3/schemas/$CommentWithBackticks.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $CommentWithBackticks = {
    type: 'number',
    description: \`Testing backticks in string: \\\\\`backticks\\\\\` and \\\\\`\\\\\`\\\\\`multiple backticks\\\\\`\\\\\`\\\\\` should work\`,
} as const;
"
`;

exports[`v3 should generate: ./test/generated/v3/schemas/$CommentWithBreaks.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $CommentWithBreaks = {
    type: 'number',
    description: \`Testing multiline comments in string: First line
    Second line

    Fourth line\`,
} as const;
"
`;

exports[`v3 should generate: ./test/generated/v3/schemas/$CommentWithExpressionPlaceholders.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $CommentWithExpressionPlaceholders = {
    type: 'number',
    description: \`Testing expression placeholders in string: \\\\\${expression} should work\`,
} as const;
"
`;

exports[`v3 should generate: ./test/generated/v3/schemas/$CommentWithQuotes.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $CommentWithQuotes = {
    type: 'number',
    description: \`Testing quotes in string: 'single quote''' and \\"double quotes\\"\\"\\" should work\`,
} as const;
"
`;

exports[`v3 should generate: ./test/generated/v3/schemas/$CommentWithReservedCharacters.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $CommentWithReservedCharacters = {
    type: 'number',
    description: \`Testing reserved characters in string: /* inline */ and /** inline **/ should work\`,
} as const;
"
`;

exports[`v3 should generate: ./test/generated/v3/schemas/$CommentWithSlashes.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $CommentWithSlashes = {
    type: 'number',
    description: \`Testing slashes in string: \\\\\\\\backwards\\\\\\\\\\\\\\\\\\\\\\\\ and /forwards/// should work\`,
} as const;
"
`;

exports[`v3 should generate: ./test/generated/v3/schemas/$CompositionBaseModel.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $CompositionBaseModel = {
    description: \`This is a base model with two simple optional properties\`,
    properties: {
        firstName: {
            type: 'string',
        },
        lastname: {
            type: 'string',
        },
    },
} as const;
"
`;

exports[`v3 should generate: ./test/generated/v3/schemas/$CompositionExtendedModel.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $CompositionExtendedModel = {
    type: 'all-of',
    description: \`This is a model that extends the base model\`,
    contains: [{
        type: 'CompositionBaseModel',
    }, {
        properties: {
            firstName: {
                type: 'string',
                isRequired: true,
            },
            lastname: {
                type: 'string',
                isRequired: true,
            },
            age: {
                type: 'number',
                isRequired: true,
            },
        },
    }],
} as const;
"
`;

exports[`v3 should generate: ./test/generated/v3/schemas/$CompositionWithAllOfAndNullable.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $CompositionWithAllOfAndNullable = {
    description: \`This is a model with one property with a 'all of' relationship\`,
    properties: {
        propA: {
            type: 'all-of',
            contains: [{
                properties: {
                    boolean: {
                        type: 'boolean',
                    },
                },
            }, {
                type: 'ModelWithEnum',
            }, {
                type: 'ModelWithArray',
            }, {
                type: 'ModelWithDictionary',
            }],
            isNullable: true,
        },
    },
} as const;
"
`;

exports[`v3 should generate: ./test/generated/v3/schemas/$CompositionWithAnyOf.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $CompositionWithAnyOf = {
    description: \`This is a model with one property with a 'any of' relationship\`,
    properties: {
        propA: {
            type: 'any-of',
            contains: [{
                type: 'ModelWithString',
            }, {
                type: 'ModelWithEnum',
            }, {
                type: 'ModelWithArray',
            }, {
                type: 'ModelWithDictionary',
            }],
        },
    },
} as const;
"
`;

exports[`v3 should generate: ./test/generated/v3/schemas/$CompositionWithAnyOfAndNullable.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $CompositionWithAnyOfAndNullable = {
    description: \`This is a model with one property with a 'any of' relationship\`,
    properties: {
        propA: {
            type: 'any-of',
            contains: [{
                properties: {
                    boolean: {
                        type: 'boolean',
                    },
                },
            }, {
                type: 'ModelWithEnum',
            }, {
                type: 'ModelWithArray',
            }, {
                type: 'ModelWithDictionary',
            }],
            isNullable: true,
        },
    },
} as const;
"
`;

exports[`v3 should generate: ./test/generated/v3/schemas/$CompositionWithAnyOfAnonymous.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $CompositionWithAnyOfAnonymous = {
    description: \`This is a model with one property with a 'any of' relationship where the options are not $ref\`,
    properties: {
        propA: {
            type: 'any-of',
            contains: [{
                description: \`Anonymous object type\`,
                properties: {
                    propA: {
                        type: 'string',
                    },
                },
            }, {
                type: 'string',
                description: \`Anonymous string type\`,
            }, {
                type: 'number',
                description: \`Anonymous integer type\`,
            }],
        },
    },
} as const;
"
`;

exports[`v3 should generate: ./test/generated/v3/schemas/$CompositionWithOneOf.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $CompositionWithOneOf = {
    description: \`This is a model with one property with a 'one of' relationship\`,
    properties: {
        propA: {
            type: 'one-of',
            contains: [{
                type: 'ModelWithString',
            }, {
                type: 'ModelWithEnum',
            }, {
                type: 'ModelWithArray',
            }, {
                type: 'ModelWithDictionary',
            }],
        },
    },
} as const;
"
`;

exports[`v3 should generate: ./test/generated/v3/schemas/$CompositionWithOneOfAndComplexArrayDictionary.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $CompositionWithOneOfAndComplexArrayDictionary = {
    description: \`This is a model that contains a dictionary of complex arrays (composited) within composition\`,
    properties: {
        propA: {
            type: 'one-of',
            contains: [{
                type: 'boolean',
            }, {
                type: 'dictionary',
                contains: {
                    type: 'array',
                    contains: {
                        type: 'one-of',
                        contains: [{
                            type: 'number',
                        }, {
                            type: 'string',
                        }],
                    },
                },
            }],
        },
    },
} as const;
"
`;

exports[`v3 should generate: ./test/generated/v3/schemas/$CompositionWithOneOfAndNullable.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $CompositionWithOneOfAndNullable = {
    description: \`This is a model with one property with a 'one of' relationship\`,
    properties: {
        propA: {
            type: 'one-of',
            contains: [{
                properties: {
                    boolean: {
                        type: 'boolean',
                    },
                },
            }, {
                type: 'ModelWithEnum',
            }, {
                type: 'ModelWithArray',
            }, {
                type: 'ModelWithDictionary',
            }],
            isNullable: true,
        },
    },
} as const;
"
`;

exports[`v3 should generate: ./test/generated/v3/schemas/$CompositionWithOneOfAndSimpleArrayDictionary.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $CompositionWithOneOfAndSimpleArrayDictionary = {
    description: \`This is a model that contains a dictionary of simple arrays within composition\`,
    properties: {
        propA: {
            type: 'one-of',
            contains: [{
                type: 'boolean',
            }, {
                type: 'dictionary',
                contains: {
                    type: 'array',
                    contains: {
                        type: 'boolean',
                    },
                },
            }],
        },
    },
} as const;
"
`;

exports[`v3 should generate: ./test/generated/v3/schemas/$CompositionWithOneOfAndSimpleDictionary.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $CompositionWithOneOfAndSimpleDictionary = {
    description: \`This is a model that contains a simple dictionary within composition\`,
    properties: {
        propA: {
            type: 'one-of',
            contains: [{
                type: 'boolean',
            }, {
                type: 'dictionary',
                contains: {
                    type: 'number',
                },
            }],
        },
    },
} as const;
"
`;

exports[`v3 should generate: ./test/generated/v3/schemas/$CompositionWithOneOfAnonymous.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $CompositionWithOneOfAnonymous = {
    description: \`This is a model with one property with a 'one of' relationship where the options are not $ref\`,
    properties: {
        propA: {
            type: 'one-of',
            contains: [{
                description: \`Anonymous object type\`,
                properties: {
                    propA: {
                        type: 'string',
                    },
                },
            }, {
                type: 'string',
                description: \`Anonymous string type\`,
            }, {
                type: 'number',
                description: \`Anonymous integer type\`,
            }],
        },
    },
} as const;
"
`;

exports[`v3 should generate: ./test/generated/v3/schemas/$CompositionWithOneOfDiscriminator.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $CompositionWithOneOfDiscriminator = {
    type: 'one-of',
    description: \`This is a model with one property with a 'one of' relationship where the options are not $ref\`,
    contains: [{
        type: 'ModelCircle',
    }, {
        type: 'ModelSquare',
    }],
} as const;
"
`;

exports[`v3 should generate: ./test/generated/v3/schemas/$CustomPredefinedNestFields.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $CustomPredefinedNestFields = {
    description: \`This is a simple reference\`,
    properties: {
        id: {
            type: 'MongoObjectId',
        },
        date: {
            type: 'DateISO',
        },
    },
} as const;
"
`;

exports[`v3 should generate: ./test/generated/v3/schemas/$DateISO.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $DateISO = {
    type: 'string',
    description: \`Date ISO\`,
} as const;
"
`;

exports[`v3 should generate: ./test/generated/v3/schemas/$DeprecatedModel.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $DeprecatedModel = {
    description: \`This is a deprecated model with a deprecated property\`,
    properties: {
        prop: {
            type: 'string',
            description: \`This is a deprecated property\`,
        },
    },
} as const;
"
`;

exports[`v3 should generate: ./test/generated/v3/schemas/$DictionaryWithArray.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $DictionaryWithArray = {
    type: 'dictionary',
    contains: {
        type: 'array',
        contains: {
            type: 'ModelWithString',
        },
    },
} as const;
"
`;

exports[`v3 should generate: ./test/generated/v3/schemas/$DictionaryWithDictionary.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $DictionaryWithDictionary = {
    type: 'dictionary',
    contains: {
        type: 'dictionary',
        contains: {
            type: 'string',
        },
    },
} as const;
"
`;

exports[`v3 should generate: ./test/generated/v3/schemas/$DictionaryWithProperties.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $DictionaryWithProperties = {
    type: 'dictionary',
    contains: {
        properties: {
            foo: {
                type: 'string',
            },
            bar: {
                type: 'string',
            },
        },
    },
} as const;
"
`;

exports[`v3 should generate: ./test/generated/v3/schemas/$DictionaryWithReference.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $DictionaryWithReference = {
    type: 'dictionary',
    contains: {
        type: 'ModelWithString',
    },
} as const;
"
`;

exports[`v3 should generate: ./test/generated/v3/schemas/$DictionaryWithString.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $DictionaryWithString = {
    type: 'dictionary',
    contains: {
        type: 'string',
    },
} as const;
"
`;

exports[`v3 should generate: ./test/generated/v3/schemas/$EnumFromDescription.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $EnumFromDescription = {
    type: 'number',
    description: \`Success=1,Warning=2,Error=3\`,
} as const;
"
`;

exports[`v3 should generate: ./test/generated/v3/schemas/$EnumViaOneOfNumeric.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $EnumViaOneOfNumeric = {
    type: 'Enum',
} as const;
"
`;

exports[`v3 should generate: ./test/generated/v3/schemas/$EnumViaOneOfString.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $EnumViaOneOfString = {
    type: 'Enum',
} as const;
"
`;

exports[`v3 should generate: ./test/generated/v3/schemas/$EnumWithExtensions.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $EnumWithExtensions = {
    type: 'Enum',
} as const;
"
`;

exports[`v3 should generate: ./test/generated/v3/schemas/$EnumWithNumbers.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $EnumWithNumbers = {
    type: 'Enum',
} as const;
"
`;

exports[`v3 should generate: ./test/generated/v3/schemas/$EnumWithStrings.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $EnumWithStrings = {
    type: 'Enum',
} as const;
"
`;

exports[`v3 should generate: ./test/generated/v3/schemas/$File.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $File = {
    properties: {
        id: {
            type: 'string',
            isReadOnly: true,
            minLength: 1,
        },
        updated_at: {
            type: 'string',
            isReadOnly: true,
            format: 'date-time',
        },
        created_at: {
            type: 'string',
            isReadOnly: true,
            format: 'date-time',
        },
        mime: {
            type: 'string',
            isRequired: true,
            maxLength: 24,
            minLength: 1,
        },
        file: {
            type: 'string',
            isReadOnly: true,
            format: 'uri',
        },
    },
} as const;
"
`;

exports[`v3 should generate: ./test/generated/v3/schemas/$ModelCircle.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelCircle = {
    description: \`Circle\`,
    properties: {
        kind: {
            type: 'string',
            isRequired: true,
        },
        radius: {
            type: 'number',
        },
    },
} as const;
"
`;

exports[`v3 should generate: ./test/generated/v3/schemas/$ModelSquare.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelSquare = {
    description: \`Square\`,
    properties: {
        kind: {
            type: 'string',
            isRequired: true,
        },
        sideLength: {
            type: 'number',
        },
    },
} as const;
"
`;

exports[`v3 should generate: ./test/generated/v3/schemas/$ModelThatExtends.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelThatExtends = {
    type: 'all-of',
    description: \`This is a model that extends another model\`,
    contains: [{
        type: 'ModelWithString',
    }, {
        properties: {
            propExtendsA: {
                type: 'string',
            },
            propExtendsB: {
                type: 'ModelWithString',
            },
        },
    }],
} as const;
"
`;

exports[`v3 should generate: ./test/generated/v3/schemas/$ModelThatExtendsExtends.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelThatExtendsExtends = {
    type: 'all-of',
    description: \`This is a model that extends another model\`,
    contains: [{
        type: 'ModelWithString',
    }, {
        type: 'ModelThatExtends',
    }, {
        properties: {
            propExtendsC: {
                type: 'string',
            },
            propExtendsD: {
                type: 'ModelWithString',
            },
        },
    }],
} as const;
"
`;

exports[`v3 should generate: ./test/generated/v3/schemas/$ModelWithArray.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelWithArray = {
    description: \`This is a model with one property containing an array\`,
    properties: {
        prop: {
            type: 'array',
            contains: {
                type: 'ModelWithString',
            },
        },
        propWithFile: {
            type: 'array',
            contains: {
                type: 'binary',
            },
        },
        propWithNumber: {
            type: 'array',
            contains: {
                type: 'number',
            },
        },
    },
} as const;
"
`;

exports[`v3 should generate: ./test/generated/v3/schemas/$ModelWithBoolean.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelWithBoolean = {
    description: \`This is a model with one boolean property\`,
    properties: {
        prop: {
            type: 'boolean',
            description: \`This is a simple boolean property\`,
        },
    },
} as const;
"
`;

exports[`v3 should generate: ./test/generated/v3/schemas/$ModelWithCircularReference.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelWithCircularReference = {
    description: \`This is a model with one property containing a circular reference\`,
    properties: {
        prop: {
            type: 'ModelWithCircularReference',
        },
    },
} as const;
"
`;

exports[`v3 should generate: ./test/generated/v3/schemas/$ModelWithDictionary.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelWithDictionary = {
    description: \`This is a model with one property containing a dictionary\`,
    properties: {
        prop: {
            type: 'dictionary',
            contains: {
                type: 'string',
            },
        },
    },
} as const;
"
`;

exports[`v3 should generate: ./test/generated/v3/schemas/$ModelWithDuplicateImports.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelWithDuplicateImports = {
    description: \`This is a model with duplicated imports\`,
    properties: {
        propA: {
            type: 'ModelWithString',
        },
        propB: {
            type: 'ModelWithString',
        },
        propC: {
            type: 'ModelWithString',
        },
    },
} as const;
"
`;

exports[`v3 should generate: ./test/generated/v3/schemas/$ModelWithDuplicateProperties.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelWithDuplicateProperties = {
    description: \`This is a model with duplicated properties\`,
    properties: {
        prop: {
            type: 'ModelWithString',
        },
    },
} as const;
"
`;

exports[`v3 should generate: ./test/generated/v3/schemas/$ModelWithEnum.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelWithEnum = {
    description: \`This is a model with one enum\`,
    properties: {
        test: {
            type: 'Enum',
        },
        statusCode: {
            type: 'Enum',
        },
        bool: {
            type: 'boolean',
            description: \`Simple boolean enum\`,
        },
    },
} as const;
"
`;

exports[`v3 should generate: ./test/generated/v3/schemas/$ModelWithEnumFromDescription.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelWithEnumFromDescription = {
    description: \`This is a model with one enum\`,
    properties: {
        test: {
            type: 'number',
            description: \`Success=1,Warning=2,Error=3\`,
        },
    },
} as const;
"
`;

exports[`v3 should generate: ./test/generated/v3/schemas/$ModelWithInteger.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelWithInteger = {
    description: \`This is a model with one number property\`,
    properties: {
        prop: {
            type: 'number',
            description: \`This is a simple number property\`,
        },
    },
} as const;
"
`;

exports[`v3 should generate: ./test/generated/v3/schemas/$ModelWithNestedEnums.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelWithNestedEnums = {
    description: \`This is a model with nested enums\`,
    properties: {
        dictionaryWithEnum: {
            type: 'dictionary',
            contains: {
                type: 'Enum',
            },
        },
        dictionaryWithEnumFromDescription: {
            type: 'dictionary',
            contains: {
                type: 'number',
                description: \`Success=1,Warning=2,Error=3\`,
            },
        },
        arrayWithEnum: {
            type: 'array',
            contains: {
                type: 'Enum',
            },
        },
        arrayWithDescription: {
            type: 'array',
            contains: {
                type: 'number',
                description: \`Success=1,Warning=2,Error=3\`,
            },
        },
    },
} as const;
"
`;

exports[`v3 should generate: ./test/generated/v3/schemas/$ModelWithNestedProperties.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelWithNestedProperties = {
    description: \`This is a model with one nested property\`,
    properties: {
        first: {
            properties: {
                second: {
                    properties: {
                        third: {
                            type: 'string',
                            isReadOnly: true,
                            isRequired: true,
                            isNullable: true,
                        },
                    },
                    isReadOnly: true,
                    isRequired: true,
                    isNullable: true,
                },
            },
            isReadOnly: true,
            isRequired: true,
            isNullable: true,
        },
    },
} as const;
"
`;

exports[`v3 should generate: ./test/generated/v3/schemas/$ModelWithNullableString.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelWithNullableString = {
    description: \`This is a model with one string property\`,
    properties: {
        nullableProp1: {
            type: 'string',
            description: \`This is a simple string property\`,
            isNullable: true,
        },
        nullableRequiredProp1: {
            type: 'string',
            description: \`This is a simple string property\`,
            isRequired: true,
            isNullable: true,
        },
        nullableProp2: {
            type: 'string',
            description: \`This is a simple string property\`,
            isNullable: true,
        },
        nullableRequiredProp2: {
            type: 'string',
            description: \`This is a simple string property\`,
            isRequired: true,
            isNullable: true,
        },
    },
} as const;
"
`;

exports[`v3 should generate: ./test/generated/v3/schemas/$ModelWithOrderedProperties.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelWithOrderedProperties = {
    description: \`This is a model with ordered properties\`,
    properties: {
        zebra: {
            type: 'string',
        },
        apple: {
            type: 'string',
        },
        hawaii: {
            type: 'string',
        },
    },
} as const;
"
`;

exports[`v3 should generate: ./test/generated/v3/schemas/$ModelWithPattern.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelWithPattern = {
    description: \`This is a model that contains a some patterns\`,
    properties: {
        key: {
            type: 'string',
            isRequired: true,
            maxLength: 64,
            pattern: '^[a-zA-Z0-9_]*$',
        },
        name: {
            type: 'string',
            isRequired: true,
            maxLength: 255,
        },
        enabled: {
            type: 'boolean',
            isReadOnly: true,
        },
        modified: {
            type: 'string',
            isReadOnly: true,
            format: 'date-time',
        },
        id: {
            type: 'string',
            pattern: '^\\\\\\\\d{2}-\\\\\\\\d{3}-\\\\\\\\d{4}$',
        },
        text: {
            type: 'string',
            pattern: '^\\\\\\\\w+$',
        },
    },
} as const;
"
`;

exports[`v3 should generate: ./test/generated/v3/schemas/$ModelWithProperties.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelWithProperties = {
    description: \`This is a model with one nested property\`,
    properties: {
        required: {
            type: 'string',
            isRequired: true,
        },
        requiredAndReadOnly: {
            type: 'string',
            isReadOnly: true,
            isRequired: true,
        },
        requiredAndNullable: {
            type: 'string',
            isRequired: true,
            isNullable: true,
        },
        string: {
            type: 'string',
        },
        number: {
            type: 'number',
        },
        boolean: {
            type: 'boolean',
        },
        reference: {
            type: 'ModelWithString',
        },
        'property with space': {
            type: 'string',
        },
        default: {
            type: 'string',
        },
        try: {
            type: 'string',
        },
        '@namespace.string': {
            type: 'string',
            isReadOnly: true,
        },
        '@namespace.integer': {
            type: 'number',
            isReadOnly: true,
        },
    },
} as const;
"
`;

exports[`v3 should generate: ./test/generated/v3/schemas/$ModelWithReference.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelWithReference = {
    description: \`This is a model with one property containing a reference\`,
    properties: {
        prop: {
            type: 'ModelWithProperties',
        },
    },
} as const;
"
`;

exports[`v3 should generate: ./test/generated/v3/schemas/$ModelWithString.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelWithString = {
    description: \`This is a model with one string property\`,
    properties: {
        prop: {
            type: 'string',
            description: \`This is a simple string property\`,
        },
    },
} as const;
"
`;

exports[`v3 should generate: ./test/generated/v3/schemas/$MongoObjectId.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $MongoObjectId = {
    type: 'string',
    description: \`Mongo ObjectId\`,
} as const;
"
`;

exports[`v3 should generate: ./test/generated/v3/schemas/$Pageable.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $Pageable = {
    properties: {
        page: {
            type: 'number',
            format: 'int32',
        },
        size: {
            type: 'number',
            format: 'int32',
            minimum: 1,
        },
        sort: {
            type: 'array',
            contains: {
                type: 'string',
            },
        },
    },
} as const;
"
`;

exports[`v3 should generate: ./test/generated/v3/schemas/$SimpleBoolean.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $SimpleBoolean = {
    type: 'boolean',
    description: \`This is a simple boolean\`,
} as const;
"
`;

exports[`v3 should generate: ./test/generated/v3/schemas/$SimpleFile.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $SimpleFile = {
    type: 'binary',
    description: \`This is a simple file\`,
} as const;
"
`;

exports[`v3 should generate: ./test/generated/v3/schemas/$SimpleInteger.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $SimpleInteger = {
    type: 'number',
    description: \`This is a simple number\`,
} as const;
"
`;

exports[`v3 should generate: ./test/generated/v3/schemas/$SimpleReference.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $SimpleReference = {
    type: 'ModelWithString',
    description: \`This is a simple reference\`,
} as const;
"
`;

exports[`v3 should generate: ./test/generated/v3/schemas/$SimpleString.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $SimpleString = {
    type: 'string',
    description: \`This is a simple string\`,
} as const;
"
`;

exports[`v3 should generate: ./test/generated/v3/schemas/$SimpleStringWithPattern.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $SimpleStringWithPattern = {
    type: 'string',
    description: \`This is a simple string\`,
    isNullable: true,
    maxLength: 64,
    pattern: '^[a-zA-Z0-9_]*$',
} as const;
"
`;

exports[`v3 should generate: ./test/generated/v3/services/CollectionFormatService.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { CancelablePromise } from '../core/CancelablePromise';
import { OpenAPI } from '../core/OpenAPI';
import { request as __request } from '../core/request';

export class CollectionFormatService {

    /**
     * @param parameterArrayCsv This is an array parameter that is sent as csv format (comma-separated values)
     * @param parameterArraySsv This is an array parameter that is sent as ssv format (space-separated values)
     * @param parameterArrayTsv This is an array parameter that is sent as tsv format (tab-separated values)
     * @param parameterArrayPipes This is an array parameter that is sent as pipes format (pipe-separated values)
     * @param parameterArrayMulti This is an array parameter that is sent as multi format (multiple parameter instances)
     * @throws ApiError
     */
    public static collectionFormat(
        parameterArrayCsv: Array<string> | null,
        parameterArraySsv: Array<string> | null,
        parameterArrayTsv: Array<string> | null,
        parameterArrayPipes: Array<string> | null,
        parameterArrayMulti: Array<string> | null,
    ): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/collectionFormat',
            query: {
                'parameterArrayCSV': parameterArrayCsv,
                'parameterArraySSV': parameterArraySsv,
                'parameterArrayTSV': parameterArrayTsv,
                'parameterArrayPipes': parameterArrayPipes,
                'parameterArrayMulti': parameterArrayMulti,
            },
        });
    }

}
"
`;

exports[`v3 should generate: ./test/generated/v3/services/ComplexService.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { ModelWithArray } from '../models/ModelWithArray';
import type { ModelWithDictionary } from '../models/ModelWithDictionary';
import type { ModelWithEnum } from '../models/ModelWithEnum';
import type { ModelWithString } from '../models/ModelWithString';

import type { CancelablePromise } from '../core/CancelablePromise';
import { OpenAPI } from '../core/OpenAPI';
import { request as __request } from '../core/request';

export class ComplexService {

    /**
     * @param parameterObject Parameter containing object
     * @param parameterReference Parameter containing reference
     * @returns ModelWithString Successful response
     * @throws ApiError
     */
    public static complexTypes(
        parameterObject: {
            first?: {
                second?: {
                    third?: string;
                };
            };
        },
        parameterReference: ModelWithString,
    ): CancelablePromise<Array<ModelWithString>> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/complex',
            query: {
                'parameterObject': parameterObject,
                'parameterReference': parameterReference,
            },
            errors: {
                400: \`400 server error\`,
                500: \`500 server error\`,
            },
        });
    }

    /**
     * @param id
     * @param requestBody
     * @returns ModelWithString Success
     * @throws ApiError
     */
    public static complexParams(
        id: number,
        requestBody?: {
            readonly key: string | null;
            name: string | null;
            enabled?: boolean;
            readonly type: 'Monkey' | 'Horse' | 'Bird';
            listOfModels?: Array<ModelWithString> | null;
            listOfStrings?: Array<string> | null;
            parameters: (ModelWithString | ModelWithEnum | ModelWithArray | ModelWithDictionary);
            readonly user?: {
                readonly id?: number;
                readonly name?: string | null;
            };
        },
    ): CancelablePromise<ModelWithString> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/v{api-version}/complex/{id}',
            path: {
                'id': id,
            },
            body: requestBody,
            mediaType: 'application/json-patch+json',
        });
    }

}
"
`;

exports[`v3 should generate: ./test/generated/v3/services/DefaultService.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { CancelablePromise } from '../core/CancelablePromise';
import { OpenAPI } from '../core/OpenAPI';
import { request as __request } from '../core/request';

export class DefaultService {

    /**
     * @throws ApiError
     */
    public static serviceWithEmptyTag(): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/no-tag',
        });
    }

}
"
`;

exports[`v3 should generate: ./test/generated/v3/services/DefaultsService.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { ModelWithString } from '../models/ModelWithString';

import type { CancelablePromise } from '../core/CancelablePromise';
import { OpenAPI } from '../core/OpenAPI';
import { request as __request } from '../core/request';

export class DefaultsService {

    /**
     * @param parameterString This is a simple string with default value
     * @param parameterNumber This is a simple number with default value
     * @param parameterBoolean This is a simple boolean with default value
     * @param parameterEnum This is a simple enum with default value
     * @param parameterModel This is a simple model with default value
     * @throws ApiError
     */
    public static callWithDefaultParameters(
        parameterString: string | null = 'Hello World!',
        parameterNumber: number | null = 123,
        parameterBoolean: boolean | null = true,
        parameterEnum: 'Success' | 'Warning' | 'Error' = 'Success',
        parameterModel: ModelWithString | null = {
            \\"prop\\": \\"Hello World!\\"
        },
    ): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/defaults',
            query: {
                'parameterString': parameterString,
                'parameterNumber': parameterNumber,
                'parameterBoolean': parameterBoolean,
                'parameterEnum': parameterEnum,
                'parameterModel': parameterModel,
            },
        });
    }

    /**
     * @param parameterString This is a simple string that is optional with default value
     * @param parameterNumber This is a simple number that is optional with default value
     * @param parameterBoolean This is a simple boolean that is optional with default value
     * @param parameterEnum This is a simple enum that is optional with default value
     * @param parameterModel This is a simple model that is optional with default value
     * @throws ApiError
     */
    public static callWithDefaultOptionalParameters(
        parameterString: string = 'Hello World!',
        parameterNumber: number = 123,
        parameterBoolean: boolean = true,
        parameterEnum: 'Success' | 'Warning' | 'Error' = 'Success',
        parameterModel: ModelWithString = {
            \\"prop\\": \\"Hello World!\\"
        },
    ): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v{api-version}/defaults',
            query: {
                'parameterString': parameterString,
                'parameterNumber': parameterNumber,
                'parameterBoolean': parameterBoolean,
                'parameterEnum': parameterEnum,
                'parameterModel': parameterModel,
            },
        });
    }

    /**
     * @param parameterStringWithNoDefault This is a string with no default
     * @param parameterOptionalStringWithDefault This is a optional string with default
     * @param parameterOptionalStringWithEmptyDefault This is a optional string with empty default
     * @param parameterOptionalStringWithNoDefault This is a optional string with no default
     * @param parameterStringWithDefault This is a string with default
     * @param parameterStringWithEmptyDefault This is a string with empty default
     * @param parameterStringNullableWithNoDefault This is a string that can be null with no default
     * @param parameterStringNullableWithDefault This is a string that can be null with default
     * @throws ApiError
     */
    public static callToTestOrderOfParams(
        parameterStringWithNoDefault: string,
        parameterOptionalStringWithDefault: string = 'Hello World!',
        parameterOptionalStringWithEmptyDefault: string = '',
        parameterOptionalStringWithNoDefault?: string,
        parameterStringWithDefault: string = 'Hello World!',
        parameterStringWithEmptyDefault: string = '',
        parameterStringNullableWithNoDefault?: string | null,
        parameterStringNullableWithDefault: string | null = null,
    ): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/v{api-version}/defaults',
            query: {
                'parameterOptionalStringWithDefault': parameterOptionalStringWithDefault,
                'parameterOptionalStringWithEmptyDefault': parameterOptionalStringWithEmptyDefault,
                'parameterOptionalStringWithNoDefault': parameterOptionalStringWithNoDefault,
                'parameterStringWithDefault': parameterStringWithDefault,
                'parameterStringWithEmptyDefault': parameterStringWithEmptyDefault,
                'parameterStringWithNoDefault': parameterStringWithNoDefault,
                'parameterStringNullableWithNoDefault': parameterStringNullableWithNoDefault,
                'parameterStringNullableWithDefault': parameterStringNullableWithDefault,
            },
        });
    }

}
"
`;

exports[`v3 should generate: ./test/generated/v3/services/DeprecatedService.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { DeprecatedModel } from '../models/DeprecatedModel';

import type { CancelablePromise } from '../core/CancelablePromise';
import { OpenAPI } from '../core/OpenAPI';
import { request as __request } from '../core/request';

export class DeprecatedService {

    /**
     * @deprecated
     * @param parameter This parameter is deprecated
     * @throws ApiError
     */
    public static deprecatedCall(
        parameter: DeprecatedModel | null,
    ): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v{api-version}/parameters/deprecated',
            headers: {
                'parameter': parameter,
            },
        });
    }

}
"
`;

exports[`v3 should generate: ./test/generated/v3/services/DescriptionsService.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { CancelablePromise } from '../core/CancelablePromise';
import { OpenAPI } from '../core/OpenAPI';
import { request as __request } from '../core/request';

export class DescriptionsService {

    /**
     * @param parameterWithBreaks Testing multiline comments in string: First line
     * Second line
     *
     * Fourth line
     * @param parameterWithBackticks Testing backticks in string: \`backticks\` and \`\`\`multiple backticks\`\`\` should work
     * @param parameterWithSlashes Testing slashes in string: \\\\backwards\\\\\\\\\\\\ and /forwards/// should work
     * @param parameterWithExpressionPlaceholders Testing expression placeholders in string: \${expression} should work
     * @param parameterWithQuotes Testing quotes in string: 'single quote''' and \\"double quotes\\"\\"\\" should work
     * @param parameterWithReservedCharacters Testing reserved characters in string: * inline * and ** inline ** should work
     * @throws ApiError
     */
    public static callWithDescriptions(
        parameterWithBreaks?: any,
        parameterWithBackticks?: any,
        parameterWithSlashes?: any,
        parameterWithExpressionPlaceholders?: any,
        parameterWithQuotes?: any,
        parameterWithReservedCharacters?: any,
    ): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v{api-version}/descriptions/',
            query: {
                'parameterWithBreaks': parameterWithBreaks,
                'parameterWithBackticks': parameterWithBackticks,
                'parameterWithSlashes': parameterWithSlashes,
                'parameterWithExpressionPlaceholders': parameterWithExpressionPlaceholders,
                'parameterWithQuotes': parameterWithQuotes,
                'parameterWithReservedCharacters': parameterWithReservedCharacters,
            },
        });
    }

}
"
`;

exports[`v3 should generate: ./test/generated/v3/services/DuplicateService.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { CancelablePromise } from '../core/CancelablePromise';
import { OpenAPI } from '../core/OpenAPI';
import { request as __request } from '../core/request';

export class DuplicateService {

    /**
     * @throws ApiError
     */
    public static duplicateName(): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/duplicate',
        });
    }

    /**
     * @throws ApiError
     */
    public static duplicateName1(): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v{api-version}/duplicate',
        });
    }

    /**
     * @throws ApiError
     */
    public static duplicateName2(): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/v{api-version}/duplicate',
        });
    }

    /**
     * @throws ApiError
     */
    public static duplicateName3(): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v{api-version}/duplicate',
        });
    }

}
"
`;

exports[`v3 should generate: ./test/generated/v3/services/ErrorService.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { CancelablePromise } from '../core/CancelablePromise';
import { OpenAPI } from '../core/OpenAPI';
import { request as __request } from '../core/request';

export class ErrorService {

    /**
     * @param status Status code to return
     * @returns any Custom message: Successful response
     * @throws ApiError
     */
    public static testErrorCode(
        status: number,
    ): CancelablePromise<any> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v{api-version}/error',
            query: {
                'status': status,
            },
            errors: {
                500: \`Custom message: Internal Server Error\`,
                501: \`Custom message: Not Implemented\`,
                502: \`Custom message: Bad Gateway\`,
                503: \`Custom message: Service Unavailable\`,
            },
        });
    }

}
"
`;

exports[`v3 should generate: ./test/generated/v3/services/FormDataService.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { ModelWithString } from '../models/ModelWithString';

import type { CancelablePromise } from '../core/CancelablePromise';
import { OpenAPI } from '../core/OpenAPI';
import { request as __request } from '../core/request';

export class FormDataService {

    /**
     * @param parameter This is a reusable parameter
     * @param formData A reusable request body
     * @throws ApiError
     */
    public static postApiFormData(
        parameter?: string,
        formData?: ModelWithString,
    ): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v{api-version}/formData/',
            query: {
                'parameter': parameter,
            },
            formData: formData,
            mediaType: 'multipart/form-data',
        });
    }

}
"
`;

exports[`v3 should generate: ./test/generated/v3/services/HeaderService.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { CancelablePromise } from '../core/CancelablePromise';
import { OpenAPI } from '../core/OpenAPI';
import { request as __request } from '../core/request';

export class HeaderService {

    /**
     * @returns string Successful response
     * @throws ApiError
     */
    public static callWithResultFromHeader(): CancelablePromise<string> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v{api-version}/header',
            responseHeader: 'operation-location',
            errors: {
                400: \`400 server error\`,
                500: \`500 server error\`,
            },
        });
    }

}
"
`;

exports[`v3 should generate: ./test/generated/v3/services/MultipartService.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { ModelWithString } from '../models/ModelWithString';

import type { CancelablePromise } from '../core/CancelablePromise';
import { OpenAPI } from '../core/OpenAPI';
import { request as __request } from '../core/request';

export class MultipartService {

    /**
     * @param formData
     * @throws ApiError
     */
    public static multipartRequest(
        formData?: {
            content?: Blob;
            data?: ModelWithString | null;
        },
    ): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v{api-version}/multipart',
            formData: formData,
            mediaType: 'multipart/form-data',
        });
    }

    /**
     * @returns any OK
     * @throws ApiError
     */
    public static multipartResponse(): CancelablePromise<{
        file?: Blob;
        metadata?: {
            foo?: string;
            bar?: string;
        };
    }> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/multipart',
        });
    }

}
"
`;

exports[`v3 should generate: ./test/generated/v3/services/MultipleTags1Service.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { CancelablePromise } from '../core/CancelablePromise';
import { OpenAPI } from '../core/OpenAPI';
import { request as __request } from '../core/request';

export class MultipleTags1Service {

    /**
     * @returns void
     * @throws ApiError
     */
    public static dummyA(): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/multiple-tags/a',
        });
    }

    /**
     * @returns void
     * @throws ApiError
     */
    public static dummyB(): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/multiple-tags/b',
        });
    }

}
"
`;

exports[`v3 should generate: ./test/generated/v3/services/MultipleTags2Service.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { CancelablePromise } from '../core/CancelablePromise';
import { OpenAPI } from '../core/OpenAPI';
import { request as __request } from '../core/request';

export class MultipleTags2Service {

    /**
     * @returns void
     * @throws ApiError
     */
    public static dummyA(): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/multiple-tags/a',
        });
    }

    /**
     * @returns void
     * @throws ApiError
     */
    public static dummyB(): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/multiple-tags/b',
        });
    }

}
"
`;

exports[`v3 should generate: ./test/generated/v3/services/MultipleTags3Service.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { CancelablePromise } from '../core/CancelablePromise';
import { OpenAPI } from '../core/OpenAPI';
import { request as __request } from '../core/request';

export class MultipleTags3Service {

    /**
     * @returns void
     * @throws ApiError
     */
    public static dummyB(): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/multiple-tags/b',
        });
    }

}
"
`;

exports[`v3 should generate: ./test/generated/v3/services/NoContentService.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { CancelablePromise } from '../core/CancelablePromise';
import { OpenAPI } from '../core/OpenAPI';
import { request as __request } from '../core/request';

export class NoContentService {

    /**
     * @returns void
     * @throws ApiError
     */
    public static callWithNoContentResponse(): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/no-content',
        });
    }

}
"
`;

exports[`v3 should generate: ./test/generated/v3/services/ParametersService.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { ModelWithString } from '../models/ModelWithString';
import type { Pageable } from '../models/Pageable';

import type { CancelablePromise } from '../core/CancelablePromise';
import { OpenAPI } from '../core/OpenAPI';
import { request as __request } from '../core/request';

export class ParametersService {

    /**
     * @param parameterHeader This is the parameter that goes into the header
     * @param parameterQuery This is the parameter that goes into the query params
     * @param parameterForm This is the parameter that goes into the form data
     * @param parameterCookie This is the parameter that goes into the cookie
     * @param parameterPath This is the parameter that goes into the path
     * @param requestBody This is the parameter that goes into the body
     * @throws ApiError
     */
    public static callWithParameters(
        parameterHeader: string | null,
        parameterQuery: string | null,
        parameterForm: string | null,
        parameterCookie: string | null,
        parameterPath: string | null,
        requestBody: ModelWithString | null,
    ): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v{api-version}/parameters/{parameterPath}',
            path: {
                'parameterPath': parameterPath,
            },
            cookies: {
                'parameterCookie': parameterCookie,
            },
            headers: {
                'parameterHeader': parameterHeader,
            },
            query: {
                'parameterQuery': parameterQuery,
            },
            formData: {
                'parameterForm': parameterForm,
            },
            body: requestBody,
            mediaType: 'application/json',
        });
    }

    /**
     * @param parameterHeader This is the parameter that goes into the request header
     * @param parameterQuery This is the parameter that goes into the request query params
     * @param parameterForm This is the parameter that goes into the request form data
     * @param parameterCookie This is the parameter that goes into the cookie
     * @param requestBody This is the parameter that goes into the body
     * @param parameterPath1 This is the parameter that goes into the path
     * @param parameterPath2 This is the parameter that goes into the path
     * @param parameterPath3 This is the parameter that goes into the path
     * @param _default This is the parameter with a reserved keyword
     * @throws ApiError
     */
    public static callWithWeirdParameterNames(
        parameterHeader: string | null,
        parameterQuery: string | null,
        parameterForm: string | null,
        parameterCookie: string | null,
        requestBody: ModelWithString | null,
        parameterPath1?: string,
        parameterPath2?: string,
        parameterPath3?: string,
        _default?: string,
    ): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v{api-version}/parameters/{parameter.path.1}/{parameter-path-2}/{PARAMETER-PATH-3}',
            path: {
                'parameter.path.1': parameterPath1,
                'parameter-path-2': parameterPath2,
                'PARAMETER-PATH-3': parameterPath3,
            },
            cookies: {
                'PARAMETER-COOKIE': parameterCookie,
            },
            headers: {
                'parameter.header': parameterHeader,
            },
            query: {
                'default': _default,
                'parameter-query': parameterQuery,
            },
            formData: {
                'parameter_form': parameterForm,
            },
            body: requestBody,
            mediaType: 'application/json',
        });
    }

    /**
     * @param requestBody This is a required parameter
     * @param parameter This is an optional parameter
     * @throws ApiError
     */
    public static getCallWithOptionalParam(
        requestBody: ModelWithString,
        parameter?: string,
    ): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/parameters/',
            query: {
                'parameter': parameter,
            },
            body: requestBody,
            mediaType: 'application/json',
        });
    }

    /**
     * @param parameter This is a required parameter
     * @param requestBody This is an optional parameter
     * @throws ApiError
     */
    public static postCallWithOptionalParam(
        parameter: Pageable,
        requestBody?: ModelWithString,
    ): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v{api-version}/parameters/',
            query: {
                'parameter': parameter,
            },
            body: requestBody,
            mediaType: 'application/json',
        });
    }

}
"
`;

exports[`v3 should generate: ./test/generated/v3/services/RequestBodyService.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { ModelWithString } from '../models/ModelWithString';

import type { CancelablePromise } from '../core/CancelablePromise';
import { OpenAPI } from '../core/OpenAPI';
import { request as __request } from '../core/request';

export class RequestBodyService {

    /**
     * @param parameter This is a reusable parameter
     * @param requestBody A reusable request body
     * @throws ApiError
     */
    public static postApiRequestBody(
        parameter?: string,
        requestBody?: ModelWithString,
    ): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v{api-version}/requestBody/',
            query: {
                'parameter': parameter,
            },
            body: requestBody,
            mediaType: 'application/json',
        });
    }

}
"
`;

exports[`v3 should generate: ./test/generated/v3/services/ResponseService.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { ModelThatExtends } from '../models/ModelThatExtends';
import type { ModelThatExtendsExtends } from '../models/ModelThatExtendsExtends';
import type { ModelWithString } from '../models/ModelWithString';

import type { CancelablePromise } from '../core/CancelablePromise';
import { OpenAPI } from '../core/OpenAPI';
import { request as __request } from '../core/request';

export class ResponseService {

    /**
     * @returns ModelWithString
     * @throws ApiError
     */
    public static callWithResponse(): CancelablePromise<ModelWithString> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/response',
        });
    }

    /**
     * @returns ModelWithString Message for default response
     * @throws ApiError
     */
    public static callWithDuplicateResponses(): CancelablePromise<ModelWithString> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v{api-version}/response',
            errors: {
                500: \`Message for 500 error\`,
                501: \`Message for 501 error\`,
                502: \`Message for 502 error\`,
            },
        });
    }

    /**
     * @returns any Message for 200 response
     * @returns ModelWithString Message for default response
     * @returns ModelThatExtends Message for 201 response
     * @returns ModelThatExtendsExtends Message for 202 response
     * @throws ApiError
     */
    public static callWithResponses(): CancelablePromise<{
        readonly '@namespace.string'?: string;
        readonly '@namespace.integer'?: number;
        readonly value?: Array<ModelWithString>;
    } | ModelWithString | ModelThatExtends | ModelThatExtendsExtends> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/v{api-version}/response',
            errors: {
                500: \`Message for 500 error\`,
                501: \`Message for 501 error\`,
                502: \`Message for 502 error\`,
            },
        });
    }

}
"
`;

exports[`v3 should generate: ./test/generated/v3/services/SimpleService.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { CancelablePromise } from '../core/CancelablePromise';
import { OpenAPI } from '../core/OpenAPI';
import { request as __request } from '../core/request';

export class SimpleService {

    /**
     * @throws ApiError
     */
    public static getCallWithoutParametersAndResponse(): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/simple',
        });
    }

    /**
     * @throws ApiError
     */
    public static putCallWithoutParametersAndResponse(): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/v{api-version}/simple',
        });
    }

    /**
     * @throws ApiError
     */
    public static postCallWithoutParametersAndResponse(): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v{api-version}/simple',
        });
    }

    /**
     * @throws ApiError
     */
    public static deleteCallWithoutParametersAndResponse(): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v{api-version}/simple',
        });
    }

    /**
     * @throws ApiError
     */
    public static optionsCallWithoutParametersAndResponse(): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'OPTIONS',
            url: '/api/v{api-version}/simple',
        });
    }

    /**
     * @throws ApiError
     */
    public static headCallWithoutParametersAndResponse(): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'HEAD',
            url: '/api/v{api-version}/simple',
        });
    }

    /**
     * @throws ApiError
     */
    public static patchCallWithoutParametersAndResponse(): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v{api-version}/simple',
        });
    }

}
"
`;

exports[`v3 should generate: ./test/generated/v3/services/TypesService.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { CancelablePromise } from '../core/CancelablePromise';
import { OpenAPI } from '../core/OpenAPI';
import { request as __request } from '../core/request';

export class TypesService {

    /**
     * @param parameterArray This is an array parameter
     * @param parameterDictionary This is a dictionary parameter
     * @param parameterEnum This is an enum parameter
     * @param parameterNumber This is a number parameter
     * @param parameterString This is a string parameter
     * @param parameterBoolean This is a boolean parameter
     * @param parameterObject This is an object parameter
     * @param id This is a number parameter
     * @returns number Response is a simple number
     * @returns string Response is a simple string
     * @returns boolean Response is a simple boolean
     * @returns any Response is a simple object
     * @throws ApiError
     */
    public static types(
        parameterArray: Array<string> | null,
        parameterDictionary: any,
        parameterEnum: 'Success' | 'Warning' | 'Error' | null,
        parameterNumber: number = 123,
        parameterString: string | null = 'default',
        parameterBoolean: boolean | null = true,
        parameterObject: any = null,
        id?: number,
    ): CancelablePromise<number | string | boolean | any> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/types',
            path: {
                'id': id,
            },
            query: {
                'parameterNumber': parameterNumber,
                'parameterString': parameterString,
                'parameterBoolean': parameterBoolean,
                'parameterObject': parameterObject,
                'parameterArray': parameterArray,
                'parameterDictionary': parameterDictionary,
                'parameterEnum': parameterEnum,
            },
        });
    }

}
"
`;

exports[`v3 should generate: ./test/generated/v3/services/UploadService.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { CancelablePromise } from '../core/CancelablePromise';
import { OpenAPI } from '../core/OpenAPI';
import { request as __request } from '../core/request';

export class UploadService {

    /**
     * @param file Supply a file reference for upload
     * @returns boolean
     * @throws ApiError
     */
    public static uploadFile(
        file: Blob,
    ): CancelablePromise<boolean> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v{api-version}/upload',
            formData: {
                'file': file,
            },
        });
    }

}
"
`;
